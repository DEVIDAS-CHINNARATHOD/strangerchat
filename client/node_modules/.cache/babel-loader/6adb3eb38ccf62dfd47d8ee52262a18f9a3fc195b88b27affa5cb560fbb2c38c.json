{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Chat\\\\strengerchat\\\\client\\\\src\\\\components\\\\VideoChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VideoChat = ({\n  partnerId,\n  onEndChat\n}) => {\n  _s();\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localStreamRef = useRef(null);\n  const remoteStreamRef = useRef(null);\n  const checkIntervalRef = useRef(null);\n  const connectionTimeoutRef = useRef(null);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [cameraError, setCameraError] = useState(null);\n  const [partnerNickname, setPartnerNickname] = useState('Stranger');\n  const [isLocalFullscreen, setIsLocalFullscreen] = useState(false);\n  const [isRemoteFullscreen, setIsRemoteFullscreen] = useState(false);\n  const [remoteVideoReady, setRemoteVideoReady] = useState(false);\n\n  // ICE servers configuration - expanded with more STUN/TURN servers\n  const iceServers = {\n    iceServers: [{\n      urls: 'stun:stun.l.google.com:19302'\n    }, {\n      urls: 'stun:stun1.l.google.com:19302'\n    }, {\n      urls: 'stun:stun2.l.google.com:19302'\n    }, {\n      urls: 'stun:stun3.l.google.com:19302'\n    }, {\n      urls: 'stun:stun4.l.google.com:19302'\n    }]\n  };\n  useEffect(() => {\n    console.log('VideoChat component mounted, partnerId:', partnerId);\n    // Start the video chat immediately when component mounts\n    startVideoChat();\n\n    // Set up WebRTC signaling event listeners\n    socket.on('offer', handleOffer);\n    socket.on('answer', handleAnswer);\n    socket.on('ice-candidate', handleIceCandidate);\n    socket.on('user-disconnected', handleUserDisconnected);\n    socket.on('chat-ended', handleChatEnded);\n\n    // Set a timeout to hide the connecting message after 10 seconds even if connection fails\n    connectionTimeoutRef.current = setTimeout(() => {\n      setIsConnecting(false);\n    }, 10000);\n\n    // Clean up when component unmounts\n    return () => {\n      stopVideoChat();\n      socket.off('offer', handleOffer);\n      socket.off('answer', handleAnswer);\n      socket.off('ice-candidate', handleIceCandidate);\n      socket.off('user-disconnected', handleUserDisconnected);\n      socket.off('chat-ended', handleChatEnded);\n\n      // Clear any interval\n      if (checkIntervalRef.current) {\n        clearInterval(checkIntervalRef.current);\n        checkIntervalRef.current = null;\n      }\n\n      // Clear connection timeout\n      if (connectionTimeoutRef.current) {\n        clearTimeout(connectionTimeoutRef.current);\n        connectionTimeoutRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [partnerId]);\n\n  // Effect to monitor remote video element\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      console.log('Setting up remote video element monitoring');\n\n      // Check if remote video is playing\n      const checkRemoteVideo = () => {\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          try {\n            console.log('Remote video dimensions:', remoteVideoRef.current.videoWidth, remoteVideoRef.current.videoHeight);\n            if (remoteVideoRef.current.videoWidth > 0) {\n              console.log('Remote video is displaying properly');\n              setRemoteVideoReady(true);\n              setIsConnecting(false);\n\n              // Clear connection timeout since video is ready\n              if (connectionTimeoutRef.current) {\n                clearTimeout(connectionTimeoutRef.current);\n                connectionTimeoutRef.current = null;\n              }\n            } else {\n              console.log('Remote video not displaying yet');\n            }\n          } catch (error) {\n            console.error('Error checking remote video:', error);\n          }\n        }\n      };\n\n      // Set up periodic check for remote video\n      checkIntervalRef.current = setInterval(checkRemoteVideo, 1000);\n      return () => {\n        if (checkIntervalRef.current) {\n          clearInterval(checkIntervalRef.current);\n          checkIntervalRef.current = null;\n        }\n      };\n    }\n  }, []);\n  const startVideoChat = async () => {\n    try {\n      console.log('Attempting to access camera and microphone...');\n      // Get local media stream (camera and microphone)\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      console.log('Camera and microphone access granted:', stream);\n\n      // Save stream reference and display in local video element\n      localStreamRef.current = stream;\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        console.log('Local video element set up with stream');\n\n        // Add event listener to check if video is actually playing\n        localVideoRef.current.onloadedmetadata = () => {\n          if (localVideoRef.current) {\n            console.log('Local video metadata loaded, playing video');\n            localVideoRef.current.play().catch(e => console.error('Error playing local video:', e));\n          }\n        };\n      } else {\n        console.error('Local video reference is null');\n      }\n\n      // Create RTCPeerConnection\n      createPeerConnection();\n\n      // Add local tracks to the peer connection\n      stream.getTracks().forEach(track => {\n        if (peerConnectionRef.current) {\n          console.log('Adding track to peer connection:', track.kind);\n          peerConnectionRef.current.addTrack(track, stream);\n        }\n      });\n\n      // If we have a partner ID, we should initiate the call\n      if (partnerId) {\n        console.log('Partner ID available, creating offer');\n        createOffer();\n      }\n      setCameraError(null);\n    } catch (error) {\n      console.error('Error starting video chat:', error);\n      setIsConnecting(false);\n      setCameraError(error.message || 'Could not access camera or microphone');\n\n      // Clear connection timeout since we have an error\n      if (connectionTimeoutRef.current) {\n        clearTimeout(connectionTimeoutRef.current);\n        connectionTimeoutRef.current = null;\n      }\n    }\n  };\n  const createPeerConnection = () => {\n    // Create new RTCPeerConnection\n    peerConnectionRef.current = new RTCPeerConnection(iceServers);\n    console.log('Peer connection created with config:', iceServers);\n\n    // Handle ICE candidate events\n    peerConnectionRef.current.onicecandidate = event => {\n      if (event.candidate && partnerId) {\n        console.log('ICE candidate generated:', event.candidate);\n        socket.emit('ice-candidate', {\n          target: partnerId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Handle connection state changes\n    peerConnectionRef.current.onconnectionstatechange = () => {\n      // Add null check before accessing connectionState\n      if (peerConnectionRef.current) {\n        console.log('Connection state:', peerConnectionRef.current.connectionState);\n\n        // Handle different connection states\n        if (peerConnectionRef.current.connectionState === 'connected') {\n          console.log('WebRTC connection established successfully');\n          setIsConnecting(false);\n\n          // Clear connection timeout since connection is established\n          if (connectionTimeoutRef.current) {\n            clearTimeout(connectionTimeoutRef.current);\n            connectionTimeoutRef.current = null;\n          }\n        } else if (peerConnectionRef.current.connectionState === 'failed') {\n          console.error('WebRTC connection failed');\n          setIsConnecting(false);\n          setCameraError('Connection failed. Please try again.');\n\n          // Clear connection timeout since we have an error\n          if (connectionTimeoutRef.current) {\n            clearTimeout(connectionTimeoutRef.current);\n            connectionTimeoutRef.current = null;\n          }\n        }\n      }\n    };\n\n    // Handle ICE connection state changes\n    peerConnectionRef.current.oniceconnectionstatechange = () => {\n      if (peerConnectionRef.current) {\n        console.log('ICE connection state:', peerConnectionRef.current.iceConnectionState);\n\n        // Handle ICE connection failures\n        if (peerConnectionRef.current.iceConnectionState === 'failed') {\n          console.error('ICE connection failed');\n          setIsConnecting(false);\n\n          // Consider restarting ICE\n          if (peerConnectionRef.current) {\n            console.log('Attempting to restart ICE');\n            peerConnectionRef.current.restartIce();\n          }\n        } else if (peerConnectionRef.current.iceConnectionState === 'connected' || peerConnectionRef.current.iceConnectionState === 'completed') {\n          setIsConnecting(false);\n        }\n      }\n    };\n\n    // Handle negotiation needed events\n    peerConnectionRef.current.onnegotiationneeded = () => {\n      console.log('Negotiation needed event');\n      if (partnerId && peerConnectionRef.current) {\n        createOffer();\n      }\n    };\n\n    // Handle receiving remote tracks\n    peerConnectionRef.current.ontrack = event => {\n      console.log('Remote track received:', event);\n      if (remoteVideoRef.current && event.streams[0]) {\n        console.log('Setting remote video stream');\n        remoteVideoRef.current.srcObject = event.streams[0];\n        remoteStreamRef.current = event.streams[0];\n\n        // Add event listener to check if video is actually playing\n        remoteVideoRef.current.onloadedmetadata = () => {\n          if (remoteVideoRef.current) {\n            console.log('Remote video metadata loaded, playing video');\n            remoteVideoRef.current.play().then(() => {\n              console.log('Remote video playing successfully');\n              setIsConnecting(false);\n              setRemoteVideoReady(true);\n\n              // Clear connection timeout since video is playing\n              if (connectionTimeoutRef.current) {\n                clearTimeout(connectionTimeoutRef.current);\n                connectionTimeoutRef.current = null;\n              }\n            }).catch(e => {\n              console.error('Error playing remote video:', e);\n              // Try playing again with user interaction\n              if (remoteVideoRef.current) {\n                const playPromise = remoteVideoRef.current.play();\n                if (playPromise !== undefined) {\n                  playPromise.catch(error => {\n                    console.log('Autoplay prevented, waiting for user interaction');\n                  });\n                }\n              }\n            });\n          }\n        };\n\n        // Additional event listeners for remote video\n        remoteVideoRef.current.onloadeddata = () => {\n          console.log('Remote video data loaded');\n          setIsConnecting(false);\n        };\n        remoteVideoRef.current.onresize = () => {\n          if (remoteVideoRef.current) {\n            try {\n              console.log('Remote video resized:', remoteVideoRef.current.videoWidth, remoteVideoRef.current.videoHeight);\n            } catch (error) {\n              console.error('Error accessing remote video properties:', error);\n            }\n          }\n        };\n\n        // Check if the stream has video tracks\n        const videoTracks = event.streams[0].getVideoTracks();\n        if (videoTracks.length > 0) {\n          console.log('Remote stream has video tracks:', videoTracks.length);\n\n          // Monitor video track state\n          videoTracks.forEach(track => {\n            console.log('Video track settings:', track.getSettings());\n            console.log('Video track constraints:', track.getConstraints());\n            console.log('Video track enabled:', track.enabled);\n            track.onmute = () => console.log('Remote video track muted');\n            track.onunmute = () => console.log('Remote video track unmuted');\n            track.onended = () => console.log('Remote video track ended');\n          });\n        } else {\n          console.warn('Remote stream has no video tracks');\n        }\n      } else {\n        console.error('Remote video reference is null or no streams available');\n      }\n    };\n  };\n  const createOffer = async () => {\n    try {\n      if (!peerConnectionRef.current) {\n        console.error('Cannot create offer: peer connection is null');\n        return;\n      }\n\n      // Create offer\n      const offer = await peerConnectionRef.current.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true\n      });\n      console.log('Offer created:', offer);\n\n      // Set local description\n      await peerConnectionRef.current.setLocalDescription(offer);\n      console.log('Local description set');\n\n      // Send offer to peer via signaling server\n      socket.emit('offer', {\n        target: partnerId,\n        offer: offer\n      });\n      console.log('Offer sent to partner:', partnerId);\n    } catch (error) {\n      console.error('Error creating offer:', error);\n    }\n  };\n  const handleOffer = async data => {\n    try {\n      console.log('Offer received from:', data.from);\n\n      // Create peer connection if it doesn't exist\n      if (!peerConnectionRef.current) {\n        console.log('Creating peer connection for received offer');\n        createPeerConnection();\n      }\n\n      // Set remote description from received offer\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\n      console.log('Remote description set from offer');\n\n      // Create answer\n      const answer = await peerConnectionRef.current.createAnswer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true\n      });\n      console.log('Answer created');\n\n      // Set local description\n      await peerConnectionRef.current.setLocalDescription(answer);\n      console.log('Local description set for answer');\n\n      // Send answer to peer via signaling server\n      socket.emit('answer', {\n        target: data.from,\n        answer: answer\n      });\n      console.log('Answer sent to:', data.from);\n    } catch (error) {\n      console.error('Error handling offer:', error);\n    }\n  };\n  const handleAnswer = async data => {\n    try {\n      console.log('Answer received from:', data.from);\n      if (!peerConnectionRef.current) {\n        console.error('Cannot handle answer: peer connection is null');\n        return;\n      }\n\n      // Set remote description from received answer\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n      console.log('Remote description set from answer');\n    } catch (error) {\n      console.error('Error handling answer:', error);\n    }\n  };\n  const handleIceCandidate = async data => {\n    try {\n      console.log('ICE candidate received from:', data.from);\n\n      // Add received ICE candidate\n      if (peerConnectionRef.current) {\n        await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n        console.log('ICE candidate added');\n      } else {\n        console.error('Cannot add ICE candidate: peer connection is null');\n      }\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n    }\n  };\n  const handleUserDisconnected = userId => {\n    if (userId === partnerId) {\n      console.log('Partner disconnected:', userId);\n      // Partner disconnected, end chat\n      handleChatEnded();\n    }\n  };\n  const handleChatEnded = (action = 'home') => {\n    console.log('Chat ended, action:', action);\n    // Clean up resources before notifying parent\n    cleanupResources();\n\n    // Notify parent component that chat has ended with action\n    if (onEndChat) {\n      onEndChat(action);\n    }\n  };\n\n  // Clean up resources separately to ensure it happens before component unmounts\n  const cleanupResources = () => {\n    // Clear any interval\n    if (checkIntervalRef.current) {\n      clearInterval(checkIntervalRef.current);\n      checkIntervalRef.current = null;\n    }\n\n    // Clear connection timeout\n    if (connectionTimeoutRef.current) {\n      clearTimeout(connectionTimeoutRef.current);\n      connectionTimeoutRef.current = null;\n    }\n\n    // Remove event listeners from video elements\n    if (localVideoRef.current) {\n      localVideoRef.current.onloadedmetadata = null;\n    }\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.onloadedmetadata = null;\n      remoteVideoRef.current.onloadeddata = null;\n      remoteVideoRef.current.onresize = null;\n    }\n    stopVideoChat();\n  };\n  const stopVideoChat = () => {\n    console.log('Stopping video chat');\n\n    // Stop all tracks in local stream\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log('Track stopped:', track.kind);\n      });\n      localStreamRef.current = null;\n    }\n\n    // Stop all tracks in remote stream\n    if (remoteStreamRef.current) {\n      remoteStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log('Remote track stopped:', track.kind);\n      });\n      remoteStreamRef.current = null;\n    }\n\n    // Clear video elements\n    if (localVideoRef.current) {\n      localVideoRef.current.srcObject = null;\n    }\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.srcObject = null;\n    }\n\n    // Close peer connection\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n      peerConnectionRef.current = null;\n      console.log('Peer connection closed');\n    }\n  };\n  const toggleMute = () => {\n    if (localStreamRef.current) {\n      const audioTracks = localStreamRef.current.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = !track.enabled;\n        console.log('Audio track enabled:', track.enabled);\n      });\n      setIsMuted(!isMuted);\n    }\n  };\n  const endChat = () => {\n    console.log('End chat requested');\n    // Send end chat signal to partner\n    socket.emit('end-chat', partnerId);\n    // End chat locally with flag to go home\n    handleChatEnded('home');\n  };\n  const nextChat = () => {\n    console.log('Next chat requested');\n    // Send end chat signal to partner\n    socket.emit('end-chat', partnerId);\n    // End chat locally with flag to find next match\n    handleChatEnded('next');\n  };\n\n  // Retry camera access\n  const retryCamera = () => {\n    console.log('Retrying camera access');\n    setCameraError(null);\n    setIsConnecting(true);\n    startVideoChat();\n  };\n\n  // Toggle fullscreen mode for local video\n  const toggleLocalFullscreen = () => {\n    // If remote is fullscreen, exit that first\n    if (isRemoteFullscreen) {\n      setIsRemoteFullscreen(false);\n    }\n    setIsLocalFullscreen(!isLocalFullscreen);\n    console.log('Local fullscreen mode:', !isLocalFullscreen);\n  };\n\n  // Toggle fullscreen mode for remote video\n  const toggleRemoteFullscreen = () => {\n    // If local is fullscreen, exit that first\n    if (isLocalFullscreen) {\n      setIsLocalFullscreen(false);\n    }\n    setIsRemoteFullscreen(!isRemoteFullscreen);\n    console.log('Remote fullscreen mode:', !isRemoteFullscreen);\n  };\n\n  // Force refresh of remote video\n  const refreshRemoteVideo = () => {\n    console.log('Manually refreshing remote video');\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const currentStream = remoteVideoRef.current.srcObject;\n      remoteVideoRef.current.srcObject = null;\n      setTimeout(() => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = currentStream;\n          remoteVideoRef.current.play().catch(e => console.error('Error playing remote video:', e));\n        }\n      }, 100);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-chat-container\",\n    children: cameraError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Camera Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: cameraError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please make sure your camera and microphone are connected and you've given permission to use them.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retryCamera,\n          className: \"retry-button\",\n          children: \"Retry Camera Access\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `remote-video-container ${isRemoteFullscreen ? 'fullscreen' : ''}`,\n          onClick: toggleRemoteFullscreen,\n          children: [isConnecting && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connecting-message\",\n            children: \"Connecting...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            className: \"remote-video\",\n            autoPlay: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 15\n          }, this), !remoteVideoReady && !isConnecting && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-status\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Waiting for stranger's video...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: refreshRemoteVideo,\n              className: \"refresh-video-button\",\n              children: \"Refresh Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label stranger-label\",\n            children: [partnerNickname, \"'s Video\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fullscreen-toggle\",\n            onClick: e => {\n              e.stopPropagation();\n              toggleRemoteFullscreen();\n            },\n            children: isRemoteFullscreen ? '×' : '⤢'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `local-video-container ${isLocalFullscreen ? 'fullscreen' : ''}`,\n          onClick: toggleLocalFullscreen,\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            className: \"local-video\",\n            autoPlay: true,\n            playsInline: true,\n            muted: true // Always mute local video to prevent feedback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label self-label\",\n            children: \"Your Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fullscreen-toggle\",\n            onClick: e => {\n              e.stopPropagation();\n              toggleLocalFullscreen();\n            },\n            children: isLocalFullscreen ? '×' : '⤢'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `control-button ${isMuted ? 'muted' : ''}`,\n          onClick: toggleMute,\n          children: isMuted ? 'Unmute' : 'Mute'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button end-button\",\n          onClick: endChat,\n          children: \"End Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button next-button\",\n          onClick: nextChat,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 589,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoChat, \"PjfSQdqYMwUlz37hDRG0iocv9PY=\");\n_c = VideoChat;\nexport default VideoChat;\nvar _c;\n$RefreshReg$(_c, \"VideoChat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","socket","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoChat","partnerId","onEndChat","_s","localVideoRef","remoteVideoRef","peerConnectionRef","localStreamRef","remoteStreamRef","checkIntervalRef","connectionTimeoutRef","isMuted","setIsMuted","isConnecting","setIsConnecting","cameraError","setCameraError","partnerNickname","setPartnerNickname","isLocalFullscreen","setIsLocalFullscreen","isRemoteFullscreen","setIsRemoteFullscreen","remoteVideoReady","setRemoteVideoReady","iceServers","urls","console","log","startVideoChat","on","handleOffer","handleAnswer","handleIceCandidate","handleUserDisconnected","handleChatEnded","current","setTimeout","stopVideoChat","off","clearInterval","clearTimeout","checkRemoteVideo","srcObject","videoWidth","videoHeight","error","setInterval","stream","navigator","mediaDevices","getUserMedia","video","audio","onloadedmetadata","play","catch","e","createPeerConnection","getTracks","forEach","track","kind","addTrack","createOffer","message","RTCPeerConnection","onicecandidate","event","candidate","emit","target","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","restartIce","onnegotiationneeded","ontrack","streams","then","playPromise","undefined","onloadeddata","onresize","videoTracks","getVideoTracks","length","getSettings","getConstraints","enabled","onmute","onunmute","onended","warn","offer","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","data","from","setRemoteDescription","RTCSessionDescription","answer","createAnswer","addIceCandidate","RTCIceCandidate","userId","action","cleanupResources","stop","close","toggleMute","audioTracks","getAudioTracks","endChat","nextChat","retryCamera","toggleLocalFullscreen","toggleRemoteFullscreen","refreshRemoteVideo","currentStream","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","playsInline","stopPropagation","muted","_c","$RefreshReg$"],"sources":["D:/Project Chat/strengerchat/client/src/components/VideoChat.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport socket from '../socket';\r\n\r\nconst VideoChat = ({ partnerId, onEndChat }) => {\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n  const peerConnectionRef = useRef(null);\r\n  const localStreamRef = useRef(null);\r\n  const remoteStreamRef = useRef(null);\r\n  const checkIntervalRef = useRef(null);\r\n  const connectionTimeoutRef = useRef(null);\r\n  \r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(true);\r\n  const [cameraError, setCameraError] = useState(null);\r\n  const [partnerNickname, setPartnerNickname] = useState('Stranger');\r\n  const [isLocalFullscreen, setIsLocalFullscreen] = useState(false);\r\n  const [isRemoteFullscreen, setIsRemoteFullscreen] = useState(false);\r\n  const [remoteVideoReady, setRemoteVideoReady] = useState(false);\r\n  \r\n  // ICE servers configuration - expanded with more STUN/TURN servers\r\n  const iceServers = {\r\n    iceServers: [\r\n      { urls: 'stun:stun.l.google.com:19302' },\r\n      { urls: 'stun:stun1.l.google.com:19302' },\r\n      { urls: 'stun:stun2.l.google.com:19302' },\r\n      { urls: 'stun:stun3.l.google.com:19302' },\r\n      { urls: 'stun:stun4.l.google.com:19302' },\r\n    ],\r\n  };\r\n  \r\n  useEffect(() => {\r\n    console.log('VideoChat component mounted, partnerId:', partnerId);\r\n    // Start the video chat immediately when component mounts\r\n    startVideoChat();\r\n    \r\n    // Set up WebRTC signaling event listeners\r\n    socket.on('offer', handleOffer);\r\n    socket.on('answer', handleAnswer);\r\n    socket.on('ice-candidate', handleIceCandidate);\r\n    socket.on('user-disconnected', handleUserDisconnected);\r\n    socket.on('chat-ended', handleChatEnded);\r\n    \r\n    // Set a timeout to hide the connecting message after 10 seconds even if connection fails\r\n    connectionTimeoutRef.current = setTimeout(() => {\r\n      setIsConnecting(false);\r\n    }, 10000);\r\n    \r\n    // Clean up when component unmounts\r\n    return () => {\r\n      stopVideoChat();\r\n      socket.off('offer', handleOffer);\r\n      socket.off('answer', handleAnswer);\r\n      socket.off('ice-candidate', handleIceCandidate);\r\n      socket.off('user-disconnected', handleUserDisconnected);\r\n      socket.off('chat-ended', handleChatEnded);\r\n      \r\n      // Clear any interval\r\n      if (checkIntervalRef.current) {\r\n        clearInterval(checkIntervalRef.current);\r\n        checkIntervalRef.current = null;\r\n      }\r\n      \r\n      // Clear connection timeout\r\n      if (connectionTimeoutRef.current) {\r\n        clearTimeout(connectionTimeoutRef.current);\r\n        connectionTimeoutRef.current = null;\r\n      }\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partnerId]);\r\n  \r\n  // Effect to monitor remote video element\r\n  useEffect(() => {\r\n    if (remoteVideoRef.current) {\r\n      console.log('Setting up remote video element monitoring');\r\n      \r\n      // Check if remote video is playing\r\n      const checkRemoteVideo = () => {\r\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\r\n          try {\r\n            console.log('Remote video dimensions:', \r\n              remoteVideoRef.current.videoWidth, \r\n              remoteVideoRef.current.videoHeight\r\n            );\r\n            \r\n            if (remoteVideoRef.current.videoWidth > 0) {\r\n              console.log('Remote video is displaying properly');\r\n              setRemoteVideoReady(true);\r\n              setIsConnecting(false);\r\n              \r\n              // Clear connection timeout since video is ready\r\n              if (connectionTimeoutRef.current) {\r\n                clearTimeout(connectionTimeoutRef.current);\r\n                connectionTimeoutRef.current = null;\r\n              }\r\n            } else {\r\n              console.log('Remote video not displaying yet');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error checking remote video:', error);\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Set up periodic check for remote video\r\n      checkIntervalRef.current = setInterval(checkRemoteVideo, 1000);\r\n      \r\n      return () => {\r\n        if (checkIntervalRef.current) {\r\n          clearInterval(checkIntervalRef.current);\r\n          checkIntervalRef.current = null;\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n  \r\n  const startVideoChat = async () => {\r\n    try {\r\n      console.log('Attempting to access camera and microphone...');\r\n      // Get local media stream (camera and microphone)\r\n      const stream = await navigator.mediaDevices.getUserMedia({ \r\n        video: true, \r\n        audio: true \r\n      });\r\n      \r\n      console.log('Camera and microphone access granted:', stream);\r\n      \r\n      // Save stream reference and display in local video element\r\n      localStreamRef.current = stream;\r\n      if (localVideoRef.current) {\r\n        localVideoRef.current.srcObject = stream;\r\n        console.log('Local video element set up with stream');\r\n        \r\n        // Add event listener to check if video is actually playing\r\n        localVideoRef.current.onloadedmetadata = () => {\r\n          if (localVideoRef.current) {\r\n            console.log('Local video metadata loaded, playing video');\r\n            localVideoRef.current.play().catch(e => console.error('Error playing local video:', e));\r\n          }\r\n        };\r\n      } else {\r\n        console.error('Local video reference is null');\r\n      }\r\n      \r\n      // Create RTCPeerConnection\r\n      createPeerConnection();\r\n      \r\n      // Add local tracks to the peer connection\r\n      stream.getTracks().forEach(track => {\r\n        if (peerConnectionRef.current) {\r\n          console.log('Adding track to peer connection:', track.kind);\r\n          peerConnectionRef.current.addTrack(track, stream);\r\n        }\r\n      });\r\n      \r\n      // If we have a partner ID, we should initiate the call\r\n      if (partnerId) {\r\n        console.log('Partner ID available, creating offer');\r\n        createOffer();\r\n      }\r\n      \r\n      setCameraError(null);\r\n    } catch (error) {\r\n      console.error('Error starting video chat:', error);\r\n      setIsConnecting(false);\r\n      setCameraError(error.message || 'Could not access camera or microphone');\r\n      \r\n      // Clear connection timeout since we have an error\r\n      if (connectionTimeoutRef.current) {\r\n        clearTimeout(connectionTimeoutRef.current);\r\n        connectionTimeoutRef.current = null;\r\n      }\r\n    }\r\n  };\r\n  \r\n  const createPeerConnection = () => {\r\n    // Create new RTCPeerConnection\r\n    peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n    console.log('Peer connection created with config:', iceServers);\r\n    \r\n    // Handle ICE candidate events\r\n    peerConnectionRef.current.onicecandidate = (event) => {\r\n      if (event.candidate && partnerId) {\r\n        console.log('ICE candidate generated:', event.candidate);\r\n        socket.emit('ice-candidate', {\r\n          target: partnerId,\r\n          candidate: event.candidate,\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Handle connection state changes\r\n    peerConnectionRef.current.onconnectionstatechange = () => {\r\n      // Add null check before accessing connectionState\r\n      if (peerConnectionRef.current) {\r\n        console.log('Connection state:', peerConnectionRef.current.connectionState);\r\n        \r\n        // Handle different connection states\r\n        if (peerConnectionRef.current.connectionState === 'connected') {\r\n          console.log('WebRTC connection established successfully');\r\n          setIsConnecting(false);\r\n          \r\n          // Clear connection timeout since connection is established\r\n          if (connectionTimeoutRef.current) {\r\n            clearTimeout(connectionTimeoutRef.current);\r\n            connectionTimeoutRef.current = null;\r\n          }\r\n        } else if (peerConnectionRef.current.connectionState === 'failed') {\r\n          console.error('WebRTC connection failed');\r\n          setIsConnecting(false);\r\n          setCameraError('Connection failed. Please try again.');\r\n          \r\n          // Clear connection timeout since we have an error\r\n          if (connectionTimeoutRef.current) {\r\n            clearTimeout(connectionTimeoutRef.current);\r\n            connectionTimeoutRef.current = null;\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Handle ICE connection state changes\r\n    peerConnectionRef.current.oniceconnectionstatechange = () => {\r\n      if (peerConnectionRef.current) {\r\n        console.log('ICE connection state:', peerConnectionRef.current.iceConnectionState);\r\n        \r\n        // Handle ICE connection failures\r\n        if (peerConnectionRef.current.iceConnectionState === 'failed') {\r\n          console.error('ICE connection failed');\r\n          setIsConnecting(false);\r\n          \r\n          // Consider restarting ICE\r\n          if (peerConnectionRef.current) {\r\n            console.log('Attempting to restart ICE');\r\n            peerConnectionRef.current.restartIce();\r\n          }\r\n        } else if (peerConnectionRef.current.iceConnectionState === 'connected' || \r\n                  peerConnectionRef.current.iceConnectionState === 'completed') {\r\n          setIsConnecting(false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Handle negotiation needed events\r\n    peerConnectionRef.current.onnegotiationneeded = () => {\r\n      console.log('Negotiation needed event');\r\n      if (partnerId && peerConnectionRef.current) {\r\n        createOffer();\r\n      }\r\n    };\r\n    \r\n    // Handle receiving remote tracks\r\n    peerConnectionRef.current.ontrack = (event) => {\r\n      console.log('Remote track received:', event);\r\n      if (remoteVideoRef.current && event.streams[0]) {\r\n        console.log('Setting remote video stream');\r\n        remoteVideoRef.current.srcObject = event.streams[0];\r\n        remoteStreamRef.current = event.streams[0];\r\n        \r\n        // Add event listener to check if video is actually playing\r\n        remoteVideoRef.current.onloadedmetadata = () => {\r\n          if (remoteVideoRef.current) {\r\n            console.log('Remote video metadata loaded, playing video');\r\n            remoteVideoRef.current.play()\r\n              .then(() => {\r\n                console.log('Remote video playing successfully');\r\n                setIsConnecting(false);\r\n                setRemoteVideoReady(true);\r\n                \r\n                // Clear connection timeout since video is playing\r\n                if (connectionTimeoutRef.current) {\r\n                  clearTimeout(connectionTimeoutRef.current);\r\n                  connectionTimeoutRef.current = null;\r\n                }\r\n              })\r\n              .catch(e => {\r\n                console.error('Error playing remote video:', e);\r\n                // Try playing again with user interaction\r\n                if (remoteVideoRef.current) {\r\n                  const playPromise = remoteVideoRef.current.play();\r\n                  if (playPromise !== undefined) {\r\n                    playPromise.catch(error => {\r\n                      console.log('Autoplay prevented, waiting for user interaction');\r\n                    });\r\n                  }\r\n                }\r\n              });\r\n          }\r\n        };\r\n        \r\n        // Additional event listeners for remote video\r\n        remoteVideoRef.current.onloadeddata = () => {\r\n          console.log('Remote video data loaded');\r\n          setIsConnecting(false);\r\n        };\r\n        \r\n        remoteVideoRef.current.onresize = () => {\r\n          if (remoteVideoRef.current) {\r\n            try {\r\n              console.log('Remote video resized:', \r\n                remoteVideoRef.current.videoWidth, \r\n                remoteVideoRef.current.videoHeight\r\n              );\r\n            } catch (error) {\r\n              console.error('Error accessing remote video properties:', error);\r\n            }\r\n          }\r\n        };\r\n        \r\n        // Check if the stream has video tracks\r\n        const videoTracks = event.streams[0].getVideoTracks();\r\n        if (videoTracks.length > 0) {\r\n          console.log('Remote stream has video tracks:', videoTracks.length);\r\n          \r\n          // Monitor video track state\r\n          videoTracks.forEach(track => {\r\n            console.log('Video track settings:', track.getSettings());\r\n            console.log('Video track constraints:', track.getConstraints());\r\n            console.log('Video track enabled:', track.enabled);\r\n            \r\n            track.onmute = () => console.log('Remote video track muted');\r\n            track.onunmute = () => console.log('Remote video track unmuted');\r\n            track.onended = () => console.log('Remote video track ended');\r\n          });\r\n        } else {\r\n          console.warn('Remote stream has no video tracks');\r\n        }\r\n      } else {\r\n        console.error('Remote video reference is null or no streams available');\r\n      }\r\n    };\r\n  };\r\n  \r\n  const createOffer = async () => {\r\n    try {\r\n      if (!peerConnectionRef.current) {\r\n        console.error('Cannot create offer: peer connection is null');\r\n        return;\r\n      }\r\n      \r\n      // Create offer\r\n      const offer = await peerConnectionRef.current.createOffer({\r\n        offerToReceiveAudio: true,\r\n        offerToReceiveVideo: true\r\n      });\r\n      console.log('Offer created:', offer);\r\n      \r\n      // Set local description\r\n      await peerConnectionRef.current.setLocalDescription(offer);\r\n      console.log('Local description set');\r\n      \r\n      // Send offer to peer via signaling server\r\n      socket.emit('offer', {\r\n        target: partnerId,\r\n        offer: offer,\r\n      });\r\n      console.log('Offer sent to partner:', partnerId);\r\n    } catch (error) {\r\n      console.error('Error creating offer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleOffer = async (data) => {\r\n    try {\r\n      console.log('Offer received from:', data.from);\r\n      \r\n      // Create peer connection if it doesn't exist\r\n      if (!peerConnectionRef.current) {\r\n        console.log('Creating peer connection for received offer');\r\n        createPeerConnection();\r\n      }\r\n      \r\n      // Set remote description from received offer\r\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\r\n      console.log('Remote description set from offer');\r\n      \r\n      // Create answer\r\n      const answer = await peerConnectionRef.current.createAnswer({\r\n        offerToReceiveAudio: true,\r\n        offerToReceiveVideo: true\r\n      });\r\n      console.log('Answer created');\r\n      \r\n      // Set local description\r\n      await peerConnectionRef.current.setLocalDescription(answer);\r\n      console.log('Local description set for answer');\r\n      \r\n      // Send answer to peer via signaling server\r\n      socket.emit('answer', {\r\n        target: data.from,\r\n        answer: answer,\r\n      });\r\n      console.log('Answer sent to:', data.from);\r\n    } catch (error) {\r\n      console.error('Error handling offer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleAnswer = async (data) => {\r\n    try {\r\n      console.log('Answer received from:', data.from);\r\n      \r\n      if (!peerConnectionRef.current) {\r\n        console.error('Cannot handle answer: peer connection is null');\r\n        return;\r\n      }\r\n      \r\n      // Set remote description from received answer\r\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\r\n      console.log('Remote description set from answer');\r\n    } catch (error) {\r\n      console.error('Error handling answer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleIceCandidate = async (data) => {\r\n    try {\r\n      console.log('ICE candidate received from:', data.from);\r\n      \r\n      // Add received ICE candidate\r\n      if (peerConnectionRef.current) {\r\n        await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n        console.log('ICE candidate added');\r\n      } else {\r\n        console.error('Cannot add ICE candidate: peer connection is null');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling ICE candidate:', error);\r\n    }\r\n  };\r\n  \r\n  const handleUserDisconnected = (userId) => {\r\n    if (userId === partnerId) {\r\n      console.log('Partner disconnected:', userId);\r\n      // Partner disconnected, end chat\r\n      handleChatEnded();\r\n    }\r\n  };\r\n  \r\n  const handleChatEnded = (action = 'home') => {\r\n    console.log('Chat ended, action:', action);\r\n    // Clean up resources before notifying parent\r\n    cleanupResources();\r\n    \r\n    // Notify parent component that chat has ended with action\r\n    if (onEndChat) {\r\n      onEndChat(action);\r\n    }\r\n  };\r\n  \r\n  // Clean up resources separately to ensure it happens before component unmounts\r\n  const cleanupResources = () => {\r\n    // Clear any interval\r\n    if (checkIntervalRef.current) {\r\n      clearInterval(checkIntervalRef.current);\r\n      checkIntervalRef.current = null;\r\n    }\r\n    \r\n    // Clear connection timeout\r\n    if (connectionTimeoutRef.current) {\r\n      clearTimeout(connectionTimeoutRef.current);\r\n      connectionTimeoutRef.current = null;\r\n    }\r\n    \r\n    // Remove event listeners from video elements\r\n    if (localVideoRef.current) {\r\n      localVideoRef.current.onloadedmetadata = null;\r\n    }\r\n    \r\n    if (remoteVideoRef.current) {\r\n      remoteVideoRef.current.onloadedmetadata = null;\r\n      remoteVideoRef.current.onloadeddata = null;\r\n      remoteVideoRef.current.onresize = null;\r\n    }\r\n    \r\n    stopVideoChat();\r\n  };\r\n  \r\n  const stopVideoChat = () => {\r\n    console.log('Stopping video chat');\r\n    \r\n    // Stop all tracks in local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n        console.log('Track stopped:', track.kind);\r\n      });\r\n      localStreamRef.current = null;\r\n    }\r\n    \r\n    // Stop all tracks in remote stream\r\n    if (remoteStreamRef.current) {\r\n      remoteStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n        console.log('Remote track stopped:', track.kind);\r\n      });\r\n      remoteStreamRef.current = null;\r\n    }\r\n    \r\n    // Clear video elements\r\n    if (localVideoRef.current) {\r\n      localVideoRef.current.srcObject = null;\r\n    }\r\n    \r\n    if (remoteVideoRef.current) {\r\n      remoteVideoRef.current.srcObject = null;\r\n    }\r\n    \r\n    // Close peer connection\r\n    if (peerConnectionRef.current) {\r\n      peerConnectionRef.current.close();\r\n      peerConnectionRef.current = null;\r\n      console.log('Peer connection closed');\r\n    }\r\n  };\r\n  \r\n  const toggleMute = () => {\r\n    if (localStreamRef.current) {\r\n      const audioTracks = localStreamRef.current.getAudioTracks();\r\n      audioTracks.forEach(track => {\r\n        track.enabled = !track.enabled;\r\n        console.log('Audio track enabled:', track.enabled);\r\n      });\r\n      setIsMuted(!isMuted);\r\n    }\r\n  };\r\n  \r\n  const endChat = () => {\r\n    console.log('End chat requested');\r\n    // Send end chat signal to partner\r\n    socket.emit('end-chat', partnerId);\r\n    // End chat locally with flag to go home\r\n    handleChatEnded('home');\r\n  };\r\n  \r\n  const nextChat = () => {\r\n    console.log('Next chat requested');\r\n    // Send end chat signal to partner\r\n    socket.emit('end-chat', partnerId);\r\n    // End chat locally with flag to find next match\r\n    handleChatEnded('next');\r\n  };\r\n  \r\n  // Retry camera access\r\n  const retryCamera = () => {\r\n    console.log('Retrying camera access');\r\n    setCameraError(null);\r\n    setIsConnecting(true);\r\n    startVideoChat();\r\n  };\r\n  \r\n  // Toggle fullscreen mode for local video\r\n  const toggleLocalFullscreen = () => {\r\n    // If remote is fullscreen, exit that first\r\n    if (isRemoteFullscreen) {\r\n      setIsRemoteFullscreen(false);\r\n    }\r\n    setIsLocalFullscreen(!isLocalFullscreen);\r\n    console.log('Local fullscreen mode:', !isLocalFullscreen);\r\n  };\r\n  \r\n  // Toggle fullscreen mode for remote video\r\n  const toggleRemoteFullscreen = () => {\r\n    // If local is fullscreen, exit that first\r\n    if (isLocalFullscreen) {\r\n      setIsLocalFullscreen(false);\r\n    }\r\n    setIsRemoteFullscreen(!isRemoteFullscreen);\r\n    console.log('Remote fullscreen mode:', !isRemoteFullscreen);\r\n  };\r\n  \r\n  // Force refresh of remote video\r\n  const refreshRemoteVideo = () => {\r\n    console.log('Manually refreshing remote video');\r\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\r\n      const currentStream = remoteVideoRef.current.srcObject;\r\n      remoteVideoRef.current.srcObject = null;\r\n      setTimeout(() => {\r\n        if (remoteVideoRef.current) {\r\n          remoteVideoRef.current.srcObject = currentStream;\r\n          remoteVideoRef.current.play().catch(e => console.error('Error playing remote video:', e));\r\n        }\r\n      }, 100);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"video-chat-container\">\r\n      {cameraError ? (\r\n        <div className=\"camera-error\">\r\n          <div className=\"error-message\">\r\n            <h3>Camera Error</h3>\r\n            <p>{cameraError}</p>\r\n            <p>Please make sure your camera and microphone are connected and you've given permission to use them.</p>\r\n            <button onClick={retryCamera} className=\"retry-button\">\r\n              Retry Camera Access\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"video-grid\">\r\n            {/* Remote video (larger) */}\r\n            <div \r\n              className={`remote-video-container ${isRemoteFullscreen ? 'fullscreen' : ''}`}\r\n              onClick={toggleRemoteFullscreen}\r\n            >\r\n              {isConnecting && <div className=\"connecting-message\">Connecting...</div>}\r\n              <video \r\n                ref={remoteVideoRef} \r\n                className=\"remote-video\" \r\n                autoPlay \r\n                playsInline\r\n              />\r\n              {!remoteVideoReady && !isConnecting && (\r\n                <div className=\"video-status\">\r\n                  <p>Waiting for stranger's video...</p>\r\n                  <button onClick={refreshRemoteVideo} className=\"refresh-video-button\">\r\n                    Refresh Video\r\n                  </button>\r\n                </div>\r\n              )}\r\n              <div className=\"video-label stranger-label\">{partnerNickname}'s Video</div>\r\n              <button \r\n                className=\"fullscreen-toggle\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleRemoteFullscreen();\r\n                }}\r\n              >\r\n                {isRemoteFullscreen ? '×' : '⤢'}\r\n              </button>\r\n            </div>\r\n            \r\n            {/* Local video (smaller, picture-in-picture) */}\r\n            <div \r\n              className={`local-video-container ${isLocalFullscreen ? 'fullscreen' : ''}`}\r\n              onClick={toggleLocalFullscreen}\r\n            >\r\n              <video \r\n                ref={localVideoRef} \r\n                className=\"local-video\" \r\n                autoPlay \r\n                playsInline \r\n                muted // Always mute local video to prevent feedback\r\n              />\r\n              <div className=\"video-label self-label\">Your Video</div>\r\n              <button \r\n                className=\"fullscreen-toggle\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleLocalFullscreen();\r\n                }}\r\n              >\r\n                {isLocalFullscreen ? '×' : '⤢'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Video controls */}\r\n          <div className=\"video-controls\">\r\n            <button \r\n              className={`control-button ${isMuted ? 'muted' : ''}`}\r\n              onClick={toggleMute}\r\n            >\r\n              {isMuted ? 'Unmute' : 'Mute'}\r\n            </button>\r\n            \r\n            <button \r\n              className=\"control-button end-button\"\r\n              onClick={endChat}\r\n            >\r\n              End Chat\r\n            </button>\r\n            \r\n            <button \r\n              className=\"control-button next-button\"\r\n              onClick={nextChat}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}