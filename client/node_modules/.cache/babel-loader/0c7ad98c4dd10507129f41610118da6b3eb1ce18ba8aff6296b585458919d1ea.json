{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Chat\\\\strengerchat\\\\client\\\\src\\\\components\\\\VideoChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VideoChat = ({\n  partnerId,\n  onEndChat\n}) => {\n  _s();\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localStreamRef = useRef(null);\n  const remoteStreamRef = useRef(null);\n  const adminConnectionsRef = useRef(new Map());\n  const [isMuted, setIsMuted] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [cameraError, setCameraError] = useState(null);\n  const [partnerNickname, setPartnerNickname] = useState('Stranger');\n  const [isLocalFullscreen, setIsLocalFullscreen] = useState(false);\n  const [isRemoteFullscreen, setIsRemoteFullscreen] = useState(false);\n  const [remoteVideoReady, setRemoteVideoReady] = useState(false);\n\n  // ICE servers configuration - expanded with more STUN/TURN servers\n  const iceServers = {\n    iceServers: [{\n      urls: 'stun:stun.l.google.com:19302'\n    }, {\n      urls: 'stun:stun1.l.google.com:19302'\n    }, {\n      urls: 'stun:stun2.l.google.com:19302'\n    }, {\n      urls: 'stun:stun3.l.google.com:19302'\n    }, {\n      urls: 'stun:stun4.l.google.com:19302'\n    }]\n  };\n  useEffect(() => {\n    console.log('VideoChat component mounted, partnerId:', partnerId);\n    // Start the video chat immediately when component mounts\n    startVideoChat();\n\n    // Set up WebRTC signaling event listeners\n    socket.on('offer', handleOffer);\n    socket.on('answer', handleAnswer);\n    socket.on('ice-candidate', handleIceCandidate);\n    socket.on('user-disconnected', handleUserDisconnected);\n    socket.on('chat-ended', handleChatEnded);\n\n    // Set up admin monitoring listeners\n    socket.on('admin-request-stream', handleAdminStreamRequest);\n    socket.on('admin-stream-answer', handleAdminStreamAnswer);\n    socket.on('admin-ice-candidate', handleAdminIceCandidate);\n\n    // Clean up when component unmounts\n    return () => {\n      stopVideoChat();\n      socket.off('offer', handleOffer);\n      socket.off('answer', handleAnswer);\n      socket.off('ice-candidate', handleIceCandidate);\n      socket.off('user-disconnected', handleUserDisconnected);\n      socket.off('chat-ended', handleChatEnded);\n\n      // Clean up admin monitoring listeners\n      socket.off('admin-request-stream', handleAdminStreamRequest);\n      socket.off('admin-stream-answer', handleAdminStreamAnswer);\n      socket.off('admin-ice-candidate', handleAdminIceCandidate);\n\n      // Close all admin connections\n      adminConnectionsRef.current.forEach(connection => {\n        if (connection) {\n          connection.close();\n        }\n      });\n      adminConnectionsRef.current.clear();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [partnerId]);\n\n  // Effect to monitor remote video element\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      console.log('Setting up remote video element monitoring');\n\n      // Check if remote video is playing\n      const checkRemoteVideo = () => {\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          console.log('Remote video dimensions:', remoteVideoRef.current.videoWidth, remoteVideoRef.current.videoHeight);\n          if (remoteVideoRef.current.videoWidth > 0) {\n            console.log('Remote video is displaying properly');\n            setRemoteVideoReady(true);\n            setIsConnecting(false);\n          } else {\n            console.log('Remote video not displaying yet');\n          }\n        }\n      };\n\n      // Set up periodic check for remote video\n      const checkInterval = setInterval(checkRemoteVideo, 1000);\n      return () => {\n        clearInterval(checkInterval);\n      };\n    }\n  }, []);\n  const startVideoChat = async () => {\n    try {\n      console.log('Attempting to access camera and microphone...');\n      // Get local media stream (camera and microphone)\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      console.log('Camera and microphone access granted:', stream);\n\n      // Save stream reference and display in local video element\n      localStreamRef.current = stream;\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        console.log('Local video element set up with stream');\n\n        // Add event listener to check if video is actually playing\n        localVideoRef.current.onloadedmetadata = () => {\n          console.log('Local video metadata loaded, playing video');\n          localVideoRef.current.play().catch(e => console.error('Error playing local video:', e));\n        };\n      } else {\n        console.error('Local video reference is null');\n      }\n\n      // Create RTCPeerConnection\n      createPeerConnection();\n\n      // Add local tracks to the peer connection\n      stream.getTracks().forEach(track => {\n        console.log('Adding track to peer connection:', track.kind);\n        peerConnectionRef.current.addTrack(track, stream);\n      });\n\n      // If we have a partner ID, we should initiate the call\n      if (partnerId) {\n        console.log('Partner ID available, creating offer');\n        createOffer();\n      }\n      setCameraError(null);\n    } catch (error) {\n      console.error('Error starting video chat:', error);\n      setIsConnecting(false);\n      setCameraError(error.message || 'Could not access camera or microphone');\n    }\n  };\n  const createPeerConnection = () => {\n    // Create new RTCPeerConnection\n    peerConnectionRef.current = new RTCPeerConnection(iceServers);\n    console.log('Peer connection created with config:', iceServers);\n\n    // Handle ICE candidate events\n    peerConnectionRef.current.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('ICE candidate generated:', event.candidate);\n        socket.emit('ice-candidate', {\n          target: partnerId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Handle connection state changes\n    peerConnectionRef.current.onconnectionstatechange = () => {\n      // Add null check before accessing connectionState\n      if (peerConnectionRef.current) {\n        console.log('Connection state:', peerConnectionRef.current.connectionState);\n\n        // Handle different connection states\n        if (peerConnectionRef.current.connectionState === 'connected') {\n          console.log('WebRTC connection established successfully');\n          setIsConnecting(false);\n        } else if (peerConnectionRef.current.connectionState === 'failed') {\n          console.error('WebRTC connection failed');\n          setIsConnecting(false);\n          setCameraError('Connection failed. Please try again.');\n        }\n      }\n    };\n\n    // Handle ICE connection state changes\n    peerConnectionRef.current.oniceconnectionstatechange = () => {\n      if (peerConnectionRef.current) {\n        console.log('ICE connection state:', peerConnectionRef.current.iceConnectionState);\n\n        // Handle ICE connection failures\n        if (peerConnectionRef.current.iceConnectionState === 'failed') {\n          console.error('ICE connection failed');\n          // Consider restarting ICE\n          if (peerConnectionRef.current) {\n            console.log('Attempting to restart ICE');\n            peerConnectionRef.current.restartIce();\n          }\n        }\n      }\n    };\n\n    // Handle negotiation needed events\n    peerConnectionRef.current.onnegotiationneeded = () => {\n      console.log('Negotiation needed event');\n      if (partnerId) {\n        createOffer();\n      }\n    };\n\n    // Handle receiving remote tracks\n    peerConnectionRef.current.ontrack = event => {\n      console.log('Remote track received:', event);\n      if (remoteVideoRef.current && event.streams[0]) {\n        console.log('Setting remote video stream');\n        remoteVideoRef.current.srcObject = event.streams[0];\n        remoteStreamRef.current = event.streams[0];\n\n        // Add event listener to check if video is actually playing\n        remoteVideoRef.current.onloadedmetadata = () => {\n          console.log('Remote video metadata loaded, playing video');\n          remoteVideoRef.current.play().then(() => {\n            console.log('Remote video playing successfully');\n            setIsConnecting(false);\n            setRemoteVideoReady(true);\n          }).catch(e => {\n            console.error('Error playing remote video:', e);\n            // Try playing again with user interaction\n            const playPromise = remoteVideoRef.current.play();\n            if (playPromise !== undefined) {\n              playPromise.catch(error => {\n                console.log('Autoplay prevented, waiting for user interaction');\n              });\n            }\n          });\n        };\n\n        // Additional event listeners for remote video\n        remoteVideoRef.current.onloadeddata = () => {\n          console.log('Remote video data loaded');\n        };\n        remoteVideoRef.current.onresize = () => {\n          console.log('Remote video resized:', remoteVideoRef.current.videoWidth, remoteVideoRef.current.videoHeight);\n        };\n\n        // Check if the stream has video tracks\n        const videoTracks = event.streams[0].getVideoTracks();\n        if (videoTracks.length > 0) {\n          console.log('Remote stream has video tracks:', videoTracks.length);\n\n          // Monitor video track state\n          videoTracks.forEach(track => {\n            console.log('Video track settings:', track.getSettings());\n            console.log('Video track constraints:', track.getConstraints());\n            console.log('Video track enabled:', track.enabled);\n            track.onmute = () => console.log('Remote video track muted');\n            track.onunmute = () => console.log('Remote video track unmuted');\n            track.onended = () => console.log('Remote video track ended');\n          });\n        } else {\n          console.warn('Remote stream has no video tracks');\n        }\n      } else {\n        console.error('Remote video reference is null or no streams available');\n      }\n    };\n  };\n  const createOffer = async () => {\n    try {\n      if (!peerConnectionRef.current) {\n        console.error('Cannot create offer: peer connection is null');\n        return;\n      }\n\n      // Create offer\n      const offer = await peerConnectionRef.current.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true\n      });\n      console.log('Offer created:', offer);\n\n      // Set local description\n      await peerConnectionRef.current.setLocalDescription(offer);\n      console.log('Local description set');\n\n      // Send offer to peer via signaling server\n      socket.emit('offer', {\n        target: partnerId,\n        offer: offer\n      });\n      console.log('Offer sent to partner:', partnerId);\n    } catch (error) {\n      console.error('Error creating offer:', error);\n    }\n  };\n  const handleOffer = async data => {\n    try {\n      console.log('Offer received from:', data.from);\n\n      // Create peer connection if it doesn't exist\n      if (!peerConnectionRef.current) {\n        console.log('Creating peer connection for received offer');\n        createPeerConnection();\n      }\n\n      // Set remote description from received offer\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\n      console.log('Remote description set from offer');\n\n      // Create answer\n      const answer = await peerConnectionRef.current.createAnswer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true\n      });\n      console.log('Answer created');\n\n      // Set local description\n      await peerConnectionRef.current.setLocalDescription(answer);\n      console.log('Local description set for answer');\n\n      // Send answer to peer via signaling server\n      socket.emit('answer', {\n        target: data.from,\n        answer: answer\n      });\n      console.log('Answer sent to:', data.from);\n    } catch (error) {\n      console.error('Error handling offer:', error);\n    }\n  };\n  const handleAnswer = async data => {\n    try {\n      console.log('Answer received from:', data.from);\n      if (!peerConnectionRef.current) {\n        console.error('Cannot handle answer: peer connection is null');\n        return;\n      }\n\n      // Set remote description from received answer\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n      console.log('Remote description set from answer');\n    } catch (error) {\n      console.error('Error handling answer:', error);\n    }\n  };\n  const handleIceCandidate = async data => {\n    try {\n      console.log('ICE candidate received from:', data.from);\n\n      // Add received ICE candidate\n      if (peerConnectionRef.current) {\n        await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n        console.log('ICE candidate added');\n      } else {\n        console.error('Cannot add ICE candidate: peer connection is null');\n      }\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n    }\n  };\n\n  // Handle admin requesting to monitor our stream\n  const handleAdminStreamRequest = async data => {\n    try {\n      console.log('Admin requested to monitor our stream:', data);\n\n      // Create a new peer connection for the admin\n      const adminConnection = new RTCPeerConnection(iceServers);\n      adminConnectionsRef.current.set(data.adminId, adminConnection);\n\n      // Add our local stream to the admin connection\n      if (localStreamRef.current) {\n        localStreamRef.current.getTracks().forEach(track => {\n          adminConnection.addTrack(track, localStreamRef.current);\n        });\n      }\n\n      // Handle ICE candidates for admin connection\n      adminConnection.onicecandidate = event => {\n        if (event.candidate) {\n          console.log('Admin ICE candidate generated:', event.candidate);\n          socket.emit('admin-ice-candidate', {\n            target: data.adminId,\n            candidate: event.candidate\n          });\n        }\n      };\n\n      // Create an offer for the admin\n      const offer = await adminConnection.createOffer();\n      await adminConnection.setLocalDescription(offer);\n\n      // Send the offer to the admin\n      socket.emit('admin-stream-offer', {\n        adminId: data.adminId,\n        connectionId: data.connectionId,\n        offer: offer\n      });\n      console.log('Sent stream offer to admin:', data.adminId);\n    } catch (error) {\n      console.error('Error handling admin stream request:', error);\n    }\n  };\n\n  // Handle admin's answer to our stream offer\n  const handleAdminStreamAnswer = async data => {\n    try {\n      console.log('Received admin stream answer:', data);\n      const adminConnection = adminConnectionsRef.current.get(data.adminId);\n      if (adminConnection) {\n        await adminConnection.setRemoteDescription(new RTCSessionDescription(data.answer));\n        console.log('Set remote description for admin connection');\n      } else {\n        console.error('No admin connection found for:', data.adminId);\n      }\n    } catch (error) {\n      console.error('Error handling admin stream answer:', error);\n    }\n  };\n\n  // Handle ICE candidates from admin\n  const handleAdminIceCandidate = async data => {\n    try {\n      console.log('Admin ICE candidate received from:', data.from);\n      const adminConnection = adminConnectionsRef.current.get(data.from);\n      if (adminConnection) {\n        await adminConnection.addIceCandidate(new RTCIceCandidate(data.candidate));\n        console.log('Admin ICE candidate added');\n      } else {\n        console.error('No admin connection found for:', data.from);\n      }\n    } catch (error) {\n      console.error('Error handling admin ICE candidate:', error);\n    }\n  };\n  const handleUserDisconnected = userId => {\n    if (userId === partnerId) {\n      console.log('Partner disconnected:', userId);\n      // Partner disconnected, end chat\n      handleChatEnded();\n    }\n  };\n  const handleChatEnded = () => {\n    console.log('Chat ended');\n    // Notify parent component that chat has ended\n    if (onEndChat) {\n      onEndChat();\n    }\n  };\n  const stopVideoChat = () => {\n    console.log('Stopping video chat');\n\n    // Stop all tracks in local stream\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log('Track stopped:', track.kind);\n      });\n    }\n\n    // Stop all tracks in remote stream\n    if (remoteStreamRef.current) {\n      remoteStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log('Remote track stopped:', track.kind);\n      });\n    }\n\n    // Clear video elements\n    if (localVideoRef.current) {\n      localVideoRef.current.srcObject = null;\n    }\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.srcObject = null;\n    }\n\n    // Close peer connection\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n      peerConnectionRef.current = null;\n      console.log('Peer connection closed');\n    }\n\n    // Close all admin connections\n    adminConnectionsRef.current.forEach(connection => {\n      if (connection) {\n        connection.close();\n      }\n    });\n    adminConnectionsRef.current.clear();\n  };\n  const toggleMute = () => {\n    if (localStreamRef.current) {\n      const audioTracks = localStreamRef.current.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = !track.enabled;\n        console.log('Audio track enabled:', track.enabled);\n      });\n      setIsMuted(!isMuted);\n    }\n  };\n  const endChat = () => {\n    console.log('End chat requested');\n    // Send end chat signal to partner\n    socket.emit('end-chat', partnerId);\n    // End chat locally\n    handleChatEnded();\n  };\n\n  // Retry camera access\n  const retryCamera = () => {\n    console.log('Retrying camera access');\n    setCameraError(null);\n    setIsConnecting(true);\n    startVideoChat();\n  };\n\n  // Toggle fullscreen mode for local video\n  const toggleLocalFullscreen = () => {\n    // If remote is fullscreen, exit that first\n    if (isRemoteFullscreen) {\n      setIsRemoteFullscreen(false);\n    }\n    setIsLocalFullscreen(!isLocalFullscreen);\n    console.log('Local fullscreen mode:', !isLocalFullscreen);\n  };\n\n  // Toggle fullscreen mode for remote video\n  const toggleRemoteFullscreen = () => {\n    // If local is fullscreen, exit that first\n    if (isLocalFullscreen) {\n      setIsLocalFullscreen(false);\n    }\n    setIsRemoteFullscreen(!isRemoteFullscreen);\n    console.log('Remote fullscreen mode:', !isRemoteFullscreen);\n  };\n\n  // Force refresh of remote video\n  const refreshRemoteVideo = () => {\n    console.log('Manually refreshing remote video');\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const currentStream = remoteVideoRef.current.srcObject;\n      remoteVideoRef.current.srcObject = null;\n      setTimeout(() => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = currentStream;\n          remoteVideoRef.current.play().catch(e => console.error('Error playing remote video:', e));\n        }\n      }, 100);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-chat-container\",\n    children: cameraError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Camera Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: cameraError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please make sure your camera and microphone are connected and you've given permission to use them.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retryCamera,\n          className: \"retry-button\",\n          children: \"Retry Camera Access\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `remote-video-container ${isRemoteFullscreen ? 'fullscreen' : ''}`,\n          onClick: toggleRemoteFullscreen,\n          children: [isConnecting && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connecting-message\",\n            children: \"Connecting...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            className: \"remote-video\",\n            autoPlay: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 15\n          }, this), !remoteVideoReady && !isConnecting && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-status\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Waiting for stranger's video...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: refreshRemoteVideo,\n              className: \"refresh-video-button\",\n              children: \"Refresh Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label stranger-label\",\n            children: [partnerNickname, \"'s Video\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fullscreen-toggle\",\n            onClick: e => {\n              e.stopPropagation();\n              toggleRemoteFullscreen();\n            },\n            children: isRemoteFullscreen ? '×' : '⤢'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `local-video-container ${isLocalFullscreen ? 'fullscreen' : ''}`,\n          onClick: toggleLocalFullscreen,\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            className: \"local-video\",\n            autoPlay: true,\n            playsInline: true,\n            muted: true // Always mute local video to prevent feedback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label self-label\",\n            children: \"Your Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fullscreen-toggle\",\n            onClick: e => {\n              e.stopPropagation();\n              toggleLocalFullscreen();\n            },\n            children: isLocalFullscreen ? '×' : '⤢'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `control-button ${isMuted ? 'muted' : ''}`,\n          onClick: toggleMute,\n          children: isMuted ? 'Unmute' : 'Mute'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button end-button\",\n          onClick: endChat,\n          children: \"End Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button next-button\",\n          onClick: endChat // Same as end chat for now\n          ,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 577,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoChat, \"vm3dCF7+IE23GtD6FWL/K3FwLlM=\");\n_c = VideoChat;\nexport default VideoChat;\nvar _c;\n$RefreshReg$(_c, \"VideoChat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","socket","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoChat","partnerId","onEndChat","_s","localVideoRef","remoteVideoRef","peerConnectionRef","localStreamRef","remoteStreamRef","adminConnectionsRef","Map","isMuted","setIsMuted","isConnecting","setIsConnecting","cameraError","setCameraError","partnerNickname","setPartnerNickname","isLocalFullscreen","setIsLocalFullscreen","isRemoteFullscreen","setIsRemoteFullscreen","remoteVideoReady","setRemoteVideoReady","iceServers","urls","console","log","startVideoChat","on","handleOffer","handleAnswer","handleIceCandidate","handleUserDisconnected","handleChatEnded","handleAdminStreamRequest","handleAdminStreamAnswer","handleAdminIceCandidate","stopVideoChat","off","current","forEach","connection","close","clear","checkRemoteVideo","srcObject","videoWidth","videoHeight","checkInterval","setInterval","clearInterval","stream","navigator","mediaDevices","getUserMedia","video","audio","onloadedmetadata","play","catch","e","error","createPeerConnection","getTracks","track","kind","addTrack","createOffer","message","RTCPeerConnection","onicecandidate","event","candidate","emit","target","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","restartIce","onnegotiationneeded","ontrack","streams","then","playPromise","undefined","onloadeddata","onresize","videoTracks","getVideoTracks","length","getSettings","getConstraints","enabled","onmute","onunmute","onended","warn","offer","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","data","from","setRemoteDescription","RTCSessionDescription","answer","createAnswer","addIceCandidate","RTCIceCandidate","adminConnection","set","adminId","connectionId","get","userId","stop","toggleMute","audioTracks","getAudioTracks","endChat","retryCamera","toggleLocalFullscreen","toggleRemoteFullscreen","refreshRemoteVideo","currentStream","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","playsInline","stopPropagation","muted","_c","$RefreshReg$"],"sources":["D:/Project Chat/strengerchat/client/src/components/VideoChat.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport socket from '../socket';\r\n\r\nconst VideoChat = ({ partnerId, onEndChat }) => {\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n  const peerConnectionRef = useRef(null);\r\n  const localStreamRef = useRef(null);\r\n  const remoteStreamRef = useRef(null);\r\n  const adminConnectionsRef = useRef(new Map());\r\n  \r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(true);\r\n  const [cameraError, setCameraError] = useState(null);\r\n  const [partnerNickname, setPartnerNickname] = useState('Stranger');\r\n  const [isLocalFullscreen, setIsLocalFullscreen] = useState(false);\r\n  const [isRemoteFullscreen, setIsRemoteFullscreen] = useState(false);\r\n  const [remoteVideoReady, setRemoteVideoReady] = useState(false);\r\n  \r\n  // ICE servers configuration - expanded with more STUN/TURN servers\r\n  const iceServers = {\r\n    iceServers: [\r\n      { urls: 'stun:stun.l.google.com:19302' },\r\n      { urls: 'stun:stun1.l.google.com:19302' },\r\n      { urls: 'stun:stun2.l.google.com:19302' },\r\n      { urls: 'stun:stun3.l.google.com:19302' },\r\n      { urls: 'stun:stun4.l.google.com:19302' },\r\n    ],\r\n  };\r\n  \r\n  useEffect(() => {\r\n    console.log('VideoChat component mounted, partnerId:', partnerId);\r\n    // Start the video chat immediately when component mounts\r\n    startVideoChat();\r\n    \r\n    // Set up WebRTC signaling event listeners\r\n    socket.on('offer', handleOffer);\r\n    socket.on('answer', handleAnswer);\r\n    socket.on('ice-candidate', handleIceCandidate);\r\n    socket.on('user-disconnected', handleUserDisconnected);\r\n    socket.on('chat-ended', handleChatEnded);\r\n    \r\n    // Set up admin monitoring listeners\r\n    socket.on('admin-request-stream', handleAdminStreamRequest);\r\n    socket.on('admin-stream-answer', handleAdminStreamAnswer);\r\n    socket.on('admin-ice-candidate', handleAdminIceCandidate);\r\n    \r\n    // Clean up when component unmounts\r\n    return () => {\r\n      stopVideoChat();\r\n      socket.off('offer', handleOffer);\r\n      socket.off('answer', handleAnswer);\r\n      socket.off('ice-candidate', handleIceCandidate);\r\n      socket.off('user-disconnected', handleUserDisconnected);\r\n      socket.off('chat-ended', handleChatEnded);\r\n      \r\n      // Clean up admin monitoring listeners\r\n      socket.off('admin-request-stream', handleAdminStreamRequest);\r\n      socket.off('admin-stream-answer', handleAdminStreamAnswer);\r\n      socket.off('admin-ice-candidate', handleAdminIceCandidate);\r\n      \r\n      // Close all admin connections\r\n      adminConnectionsRef.current.forEach((connection) => {\r\n        if (connection) {\r\n          connection.close();\r\n        }\r\n      });\r\n      adminConnectionsRef.current.clear();\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partnerId]);\r\n  \r\n  // Effect to monitor remote video element\r\n  useEffect(() => {\r\n    if (remoteVideoRef.current) {\r\n      console.log('Setting up remote video element monitoring');\r\n      \r\n      // Check if remote video is playing\r\n      const checkRemoteVideo = () => {\r\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\r\n          console.log('Remote video dimensions:', \r\n            remoteVideoRef.current.videoWidth, \r\n            remoteVideoRef.current.videoHeight\r\n          );\r\n          \r\n          if (remoteVideoRef.current.videoWidth > 0) {\r\n            console.log('Remote video is displaying properly');\r\n            setRemoteVideoReady(true);\r\n            setIsConnecting(false);\r\n          } else {\r\n            console.log('Remote video not displaying yet');\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Set up periodic check for remote video\r\n      const checkInterval = setInterval(checkRemoteVideo, 1000);\r\n      \r\n      return () => {\r\n        clearInterval(checkInterval);\r\n      };\r\n    }\r\n  }, []);\r\n  \r\n  const startVideoChat = async () => {\r\n    try {\r\n      console.log('Attempting to access camera and microphone...');\r\n      // Get local media stream (camera and microphone)\r\n      const stream = await navigator.mediaDevices.getUserMedia({ \r\n        video: true, \r\n        audio: true \r\n      });\r\n      \r\n      console.log('Camera and microphone access granted:', stream);\r\n      \r\n      // Save stream reference and display in local video element\r\n      localStreamRef.current = stream;\r\n      if (localVideoRef.current) {\r\n        localVideoRef.current.srcObject = stream;\r\n        console.log('Local video element set up with stream');\r\n        \r\n        // Add event listener to check if video is actually playing\r\n        localVideoRef.current.onloadedmetadata = () => {\r\n          console.log('Local video metadata loaded, playing video');\r\n          localVideoRef.current.play().catch(e => console.error('Error playing local video:', e));\r\n        };\r\n      } else {\r\n        console.error('Local video reference is null');\r\n      }\r\n      \r\n      // Create RTCPeerConnection\r\n      createPeerConnection();\r\n      \r\n      // Add local tracks to the peer connection\r\n      stream.getTracks().forEach(track => {\r\n        console.log('Adding track to peer connection:', track.kind);\r\n        peerConnectionRef.current.addTrack(track, stream);\r\n      });\r\n      \r\n      // If we have a partner ID, we should initiate the call\r\n      if (partnerId) {\r\n        console.log('Partner ID available, creating offer');\r\n        createOffer();\r\n      }\r\n      \r\n      setCameraError(null);\r\n    } catch (error) {\r\n      console.error('Error starting video chat:', error);\r\n      setIsConnecting(false);\r\n      setCameraError(error.message || 'Could not access camera or microphone');\r\n    }\r\n  };\r\n  \r\n  const createPeerConnection = () => {\r\n    // Create new RTCPeerConnection\r\n    peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n    console.log('Peer connection created with config:', iceServers);\r\n    \r\n    // Handle ICE candidate events\r\n    peerConnectionRef.current.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        console.log('ICE candidate generated:', event.candidate);\r\n        socket.emit('ice-candidate', {\r\n          target: partnerId,\r\n          candidate: event.candidate,\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Handle connection state changes\r\n    peerConnectionRef.current.onconnectionstatechange = () => {\r\n      // Add null check before accessing connectionState\r\n      if (peerConnectionRef.current) {\r\n        console.log('Connection state:', peerConnectionRef.current.connectionState);\r\n        \r\n        // Handle different connection states\r\n        if (peerConnectionRef.current.connectionState === 'connected') {\r\n          console.log('WebRTC connection established successfully');\r\n          setIsConnecting(false);\r\n        } else if (peerConnectionRef.current.connectionState === 'failed') {\r\n          console.error('WebRTC connection failed');\r\n          setIsConnecting(false);\r\n          setCameraError('Connection failed. Please try again.');\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Handle ICE connection state changes\r\n    peerConnectionRef.current.oniceconnectionstatechange = () => {\r\n      if (peerConnectionRef.current) {\r\n        console.log('ICE connection state:', peerConnectionRef.current.iceConnectionState);\r\n        \r\n        // Handle ICE connection failures\r\n        if (peerConnectionRef.current.iceConnectionState === 'failed') {\r\n          console.error('ICE connection failed');\r\n          // Consider restarting ICE\r\n          if (peerConnectionRef.current) {\r\n            console.log('Attempting to restart ICE');\r\n            peerConnectionRef.current.restartIce();\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Handle negotiation needed events\r\n    peerConnectionRef.current.onnegotiationneeded = () => {\r\n      console.log('Negotiation needed event');\r\n      if (partnerId) {\r\n        createOffer();\r\n      }\r\n    };\r\n    \r\n    // Handle receiving remote tracks\r\n    peerConnectionRef.current.ontrack = (event) => {\r\n      console.log('Remote track received:', event);\r\n      if (remoteVideoRef.current && event.streams[0]) {\r\n        console.log('Setting remote video stream');\r\n        remoteVideoRef.current.srcObject = event.streams[0];\r\n        remoteStreamRef.current = event.streams[0];\r\n        \r\n        // Add event listener to check if video is actually playing\r\n        remoteVideoRef.current.onloadedmetadata = () => {\r\n          console.log('Remote video metadata loaded, playing video');\r\n          remoteVideoRef.current.play()\r\n            .then(() => {\r\n              console.log('Remote video playing successfully');\r\n              setIsConnecting(false);\r\n              setRemoteVideoReady(true);\r\n            })\r\n            .catch(e => {\r\n              console.error('Error playing remote video:', e);\r\n              // Try playing again with user interaction\r\n              const playPromise = remoteVideoRef.current.play();\r\n              if (playPromise !== undefined) {\r\n                playPromise.catch(error => {\r\n                  console.log('Autoplay prevented, waiting for user interaction');\r\n                });\r\n              }\r\n            });\r\n        };\r\n        \r\n        // Additional event listeners for remote video\r\n        remoteVideoRef.current.onloadeddata = () => {\r\n          console.log('Remote video data loaded');\r\n        };\r\n        \r\n        remoteVideoRef.current.onresize = () => {\r\n          console.log('Remote video resized:', \r\n            remoteVideoRef.current.videoWidth, \r\n            remoteVideoRef.current.videoHeight\r\n          );\r\n        };\r\n        \r\n        // Check if the stream has video tracks\r\n        const videoTracks = event.streams[0].getVideoTracks();\r\n        if (videoTracks.length > 0) {\r\n          console.log('Remote stream has video tracks:', videoTracks.length);\r\n          \r\n          // Monitor video track state\r\n          videoTracks.forEach(track => {\r\n            console.log('Video track settings:', track.getSettings());\r\n            console.log('Video track constraints:', track.getConstraints());\r\n            console.log('Video track enabled:', track.enabled);\r\n            \r\n            track.onmute = () => console.log('Remote video track muted');\r\n            track.onunmute = () => console.log('Remote video track unmuted');\r\n            track.onended = () => console.log('Remote video track ended');\r\n          });\r\n        } else {\r\n          console.warn('Remote stream has no video tracks');\r\n        }\r\n      } else {\r\n        console.error('Remote video reference is null or no streams available');\r\n      }\r\n    };\r\n  };\r\n  \r\n  const createOffer = async () => {\r\n    try {\r\n      if (!peerConnectionRef.current) {\r\n        console.error('Cannot create offer: peer connection is null');\r\n        return;\r\n      }\r\n      \r\n      // Create offer\r\n      const offer = await peerConnectionRef.current.createOffer({\r\n        offerToReceiveAudio: true,\r\n        offerToReceiveVideo: true\r\n      });\r\n      console.log('Offer created:', offer);\r\n      \r\n      // Set local description\r\n      await peerConnectionRef.current.setLocalDescription(offer);\r\n      console.log('Local description set');\r\n      \r\n      // Send offer to peer via signaling server\r\n      socket.emit('offer', {\r\n        target: partnerId,\r\n        offer: offer,\r\n      });\r\n      console.log('Offer sent to partner:', partnerId);\r\n    } catch (error) {\r\n      console.error('Error creating offer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleOffer = async (data) => {\r\n    try {\r\n      console.log('Offer received from:', data.from);\r\n      \r\n      // Create peer connection if it doesn't exist\r\n      if (!peerConnectionRef.current) {\r\n        console.log('Creating peer connection for received offer');\r\n        createPeerConnection();\r\n      }\r\n      \r\n      // Set remote description from received offer\r\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\r\n      console.log('Remote description set from offer');\r\n      \r\n      // Create answer\r\n      const answer = await peerConnectionRef.current.createAnswer({\r\n        offerToReceiveAudio: true,\r\n        offerToReceiveVideo: true\r\n      });\r\n      console.log('Answer created');\r\n      \r\n      // Set local description\r\n      await peerConnectionRef.current.setLocalDescription(answer);\r\n      console.log('Local description set for answer');\r\n      \r\n      // Send answer to peer via signaling server\r\n      socket.emit('answer', {\r\n        target: data.from,\r\n        answer: answer,\r\n      });\r\n      console.log('Answer sent to:', data.from);\r\n    } catch (error) {\r\n      console.error('Error handling offer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleAnswer = async (data) => {\r\n    try {\r\n      console.log('Answer received from:', data.from);\r\n      \r\n      if (!peerConnectionRef.current) {\r\n        console.error('Cannot handle answer: peer connection is null');\r\n        return;\r\n      }\r\n      \r\n      // Set remote description from received answer\r\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\r\n      console.log('Remote description set from answer');\r\n    } catch (error) {\r\n      console.error('Error handling answer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleIceCandidate = async (data) => {\r\n    try {\r\n      console.log('ICE candidate received from:', data.from);\r\n      \r\n      // Add received ICE candidate\r\n      if (peerConnectionRef.current) {\r\n        await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n        console.log('ICE candidate added');\r\n      } else {\r\n        console.error('Cannot add ICE candidate: peer connection is null');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling ICE candidate:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle admin requesting to monitor our stream\r\n  const handleAdminStreamRequest = async (data) => {\r\n    try {\r\n      console.log('Admin requested to monitor our stream:', data);\r\n      \r\n      // Create a new peer connection for the admin\r\n      const adminConnection = new RTCPeerConnection(iceServers);\r\n      adminConnectionsRef.current.set(data.adminId, adminConnection);\r\n      \r\n      // Add our local stream to the admin connection\r\n      if (localStreamRef.current) {\r\n        localStreamRef.current.getTracks().forEach(track => {\r\n          adminConnection.addTrack(track, localStreamRef.current);\r\n        });\r\n      }\r\n      \r\n      // Handle ICE candidates for admin connection\r\n      adminConnection.onicecandidate = (event) => {\r\n        if (event.candidate) {\r\n          console.log('Admin ICE candidate generated:', event.candidate);\r\n          socket.emit('admin-ice-candidate', {\r\n            target: data.adminId,\r\n            candidate: event.candidate,\r\n          });\r\n        }\r\n      };\r\n      \r\n      // Create an offer for the admin\r\n      const offer = await adminConnection.createOffer();\r\n      await adminConnection.setLocalDescription(offer);\r\n      \r\n      // Send the offer to the admin\r\n      socket.emit('admin-stream-offer', {\r\n        adminId: data.adminId,\r\n        connectionId: data.connectionId,\r\n        offer: offer\r\n      });\r\n      \r\n      console.log('Sent stream offer to admin:', data.adminId);\r\n    } catch (error) {\r\n      console.error('Error handling admin stream request:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle admin's answer to our stream offer\r\n  const handleAdminStreamAnswer = async (data) => {\r\n    try {\r\n      console.log('Received admin stream answer:', data);\r\n      \r\n      const adminConnection = adminConnectionsRef.current.get(data.adminId);\r\n      if (adminConnection) {\r\n        await adminConnection.setRemoteDescription(new RTCSessionDescription(data.answer));\r\n        console.log('Set remote description for admin connection');\r\n      } else {\r\n        console.error('No admin connection found for:', data.adminId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling admin stream answer:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle ICE candidates from admin\r\n  const handleAdminIceCandidate = async (data) => {\r\n    try {\r\n      console.log('Admin ICE candidate received from:', data.from);\r\n      \r\n      const adminConnection = adminConnectionsRef.current.get(data.from);\r\n      if (adminConnection) {\r\n        await adminConnection.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n        console.log('Admin ICE candidate added');\r\n      } else {\r\n        console.error('No admin connection found for:', data.from);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling admin ICE candidate:', error);\r\n    }\r\n  };\r\n  \r\n  const handleUserDisconnected = (userId) => {\r\n    if (userId === partnerId) {\r\n      console.log('Partner disconnected:', userId);\r\n      // Partner disconnected, end chat\r\n      handleChatEnded();\r\n    }\r\n  };\r\n  \r\n  const handleChatEnded = () => {\r\n    console.log('Chat ended');\r\n    // Notify parent component that chat has ended\r\n    if (onEndChat) {\r\n      onEndChat();\r\n    }\r\n  };\r\n  \r\n  const stopVideoChat = () => {\r\n    console.log('Stopping video chat');\r\n    \r\n    // Stop all tracks in local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n        console.log('Track stopped:', track.kind);\r\n      });\r\n    }\r\n    \r\n    // Stop all tracks in remote stream\r\n    if (remoteStreamRef.current) {\r\n      remoteStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n        console.log('Remote track stopped:', track.kind);\r\n      });\r\n    }\r\n    \r\n    // Clear video elements\r\n    if (localVideoRef.current) {\r\n      localVideoRef.current.srcObject = null;\r\n    }\r\n    \r\n    if (remoteVideoRef.current) {\r\n      remoteVideoRef.current.srcObject = null;\r\n    }\r\n    \r\n    // Close peer connection\r\n    if (peerConnectionRef.current) {\r\n      peerConnectionRef.current.close();\r\n      peerConnectionRef.current = null;\r\n      console.log('Peer connection closed');\r\n    }\r\n    \r\n    // Close all admin connections\r\n    adminConnectionsRef.current.forEach((connection) => {\r\n      if (connection) {\r\n        connection.close();\r\n      }\r\n    });\r\n    adminConnectionsRef.current.clear();\r\n  };\r\n  \r\n  const toggleMute = () => {\r\n    if (localStreamRef.current) {\r\n      const audioTracks = localStreamRef.current.getAudioTracks();\r\n      audioTracks.forEach(track => {\r\n        track.enabled = !track.enabled;\r\n        console.log('Audio track enabled:', track.enabled);\r\n      });\r\n      setIsMuted(!isMuted);\r\n    }\r\n  };\r\n  \r\n  const endChat = () => {\r\n    console.log('End chat requested');\r\n    // Send end chat signal to partner\r\n    socket.emit('end-chat', partnerId);\r\n    // End chat locally\r\n    handleChatEnded();\r\n  };\r\n  \r\n  // Retry camera access\r\n  const retryCamera = () => {\r\n    console.log('Retrying camera access');\r\n    setCameraError(null);\r\n    setIsConnecting(true);\r\n    startVideoChat();\r\n  };\r\n  \r\n  // Toggle fullscreen mode for local video\r\n  const toggleLocalFullscreen = () => {\r\n    // If remote is fullscreen, exit that first\r\n    if (isRemoteFullscreen) {\r\n      setIsRemoteFullscreen(false);\r\n    }\r\n    setIsLocalFullscreen(!isLocalFullscreen);\r\n    console.log('Local fullscreen mode:', !isLocalFullscreen);\r\n  };\r\n  \r\n  // Toggle fullscreen mode for remote video\r\n  const toggleRemoteFullscreen = () => {\r\n    // If local is fullscreen, exit that first\r\n    if (isLocalFullscreen) {\r\n      setIsLocalFullscreen(false);\r\n    }\r\n    setIsRemoteFullscreen(!isRemoteFullscreen);\r\n    console.log('Remote fullscreen mode:', !isRemoteFullscreen);\r\n  };\r\n  \r\n  // Force refresh of remote video\r\n  const refreshRemoteVideo = () => {\r\n    console.log('Manually refreshing remote video');\r\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\r\n      const currentStream = remoteVideoRef.current.srcObject;\r\n      remoteVideoRef.current.srcObject = null;\r\n      setTimeout(() => {\r\n        if (remoteVideoRef.current) {\r\n          remoteVideoRef.current.srcObject = currentStream;\r\n          remoteVideoRef.current.play().catch(e => console.error('Error playing remote video:', e));\r\n        }\r\n      }, 100);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"video-chat-container\">\r\n      {cameraError ? (\r\n        <div className=\"camera-error\">\r\n          <div className=\"error-message\">\r\n            <h3>Camera Error</h3>\r\n            <p>{cameraError}</p>\r\n            <p>Please make sure your camera and microphone are connected and you've given permission to use them.</p>\r\n            <button onClick={retryCamera} className=\"retry-button\">\r\n              Retry Camera Access\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"video-grid\">\r\n            {/* Remote video (larger) */}\r\n            <div \r\n              className={`remote-video-container ${isRemoteFullscreen ? 'fullscreen' : ''}`}\r\n              onClick={toggleRemoteFullscreen}\r\n            >\r\n              {isConnecting && <div className=\"connecting-message\">Connecting...</div>}\r\n              <video \r\n                ref={remoteVideoRef} \r\n                className=\"remote-video\" \r\n                autoPlay \r\n                playsInline\r\n              />\r\n              {!remoteVideoReady && !isConnecting && (\r\n                <div className=\"video-status\">\r\n                  <p>Waiting for stranger's video...</p>\r\n                  <button onClick={refreshRemoteVideo} className=\"refresh-video-button\">\r\n                    Refresh Video\r\n                  </button>\r\n                </div>\r\n              )}\r\n              <div className=\"video-label stranger-label\">{partnerNickname}'s Video</div>\r\n              <button \r\n                className=\"fullscreen-toggle\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleRemoteFullscreen();\r\n                }}\r\n              >\r\n                {isRemoteFullscreen ? '×' : '⤢'}\r\n              </button>\r\n            </div>\r\n            \r\n            {/* Local video (smaller, picture-in-picture) */}\r\n            <div \r\n              className={`local-video-container ${isLocalFullscreen ? 'fullscreen' : ''}`}\r\n              onClick={toggleLocalFullscreen}\r\n            >\r\n              <video \r\n                ref={localVideoRef} \r\n                className=\"local-video\" \r\n                autoPlay \r\n                playsInline \r\n                muted // Always mute local video to prevent feedback\r\n              />\r\n              <div className=\"video-label self-label\">Your Video</div>\r\n              <button \r\n                className=\"fullscreen-toggle\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleLocalFullscreen();\r\n                }}\r\n              >\r\n                {isLocalFullscreen ? '×' : '⤢'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Video controls */}\r\n          <div className=\"video-controls\">\r\n            <button \r\n              className={`control-button ${isMuted ? 'muted' : ''}`}\r\n              onClick={toggleMute}\r\n            >\r\n              {isMuted ? 'Unmute' : 'Mute'}\r\n            </button>\r\n            \r\n            <button \r\n              className=\"control-button end-button\"\r\n              onClick={endChat}\r\n            >\r\n              End Chat\r\n            </button>\r\n            \r\n            <button \r\n              className=\"control-button next-button\"\r\n              onClick={endChat} // Same as end chat for now\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}