{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Chat\\\\strengerchat\\\\client\\\\src\\\\components\\\\VideoChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VideoChat = ({\n  partnerId,\n  onEndChat\n}) => {\n  _s();\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localStreamRef = useRef(null);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [cameraError, setCameraError] = useState(null);\n  const [partnerNickname, setPartnerNickname] = useState('Stranger');\n  const [isLocalFullscreen, setIsLocalFullscreen] = useState(false);\n  const [isRemoteFullscreen, setIsRemoteFullscreen] = useState(false);\n\n  // ICE servers configuration\n  const iceServers = {\n    iceServers: [{\n      urls: 'stun:stun.l.google.com:19302'\n    }, {\n      urls: 'stun:stun1.l.google.com:19302'\n    }]\n  };\n  useEffect(() => {\n    console.log('VideoChat component mounted, partnerId:', partnerId);\n    // Start the video chat immediately when component mounts\n    startVideoChat();\n\n    // Set up WebRTC signaling event listeners\n    socket.on('offer', handleOffer);\n    socket.on('answer', handleAnswer);\n    socket.on('ice-candidate', handleIceCandidate);\n    socket.on('user-disconnected', handleUserDisconnected);\n    socket.on('chat-ended', handleChatEnded);\n\n    // Clean up when component unmounts\n    return () => {\n      stopVideoChat();\n      socket.off('offer', handleOffer);\n      socket.off('answer', handleAnswer);\n      socket.off('ice-candidate', handleIceCandidate);\n      socket.off('user-disconnected', handleUserDisconnected);\n      socket.off('chat-ended', handleChatEnded);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [partnerId]);\n  const startVideoChat = async () => {\n    try {\n      console.log('Attempting to access camera and microphone...');\n      // Get local media stream (camera and microphone)\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      console.log('Camera and microphone access granted:', stream);\n\n      // Save stream reference and display in local video element\n      localStreamRef.current = stream;\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        console.log('Local video element set up with stream');\n\n        // Add event listener to check if video is actually playing\n        localVideoRef.current.onloadedmetadata = () => {\n          console.log('Local video metadata loaded, playing video');\n          localVideoRef.current.play().catch(e => console.error('Error playing local video:', e));\n        };\n      } else {\n        console.error('Local video reference is null');\n      }\n\n      // Create RTCPeerConnection\n      createPeerConnection();\n\n      // Add local tracks to the peer connection\n      stream.getTracks().forEach(track => {\n        peerConnectionRef.current.addTrack(track, stream);\n      });\n\n      // If we have a partner ID, we should initiate the call\n      if (partnerId) {\n        console.log('Partner ID available, creating offer');\n        createOffer();\n      }\n      setIsConnecting(false);\n      setCameraError(null);\n    } catch (error) {\n      console.error('Error starting video chat:', error);\n      setIsConnecting(false);\n      setCameraError(error.message || 'Could not access camera or microphone');\n    }\n  };\n  const createPeerConnection = () => {\n    // Create new RTCPeerConnection\n    peerConnectionRef.current = new RTCPeerConnection(iceServers);\n    console.log('Peer connection created');\n\n    // Handle ICE candidate events\n    peerConnectionRef.current.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('ICE candidate generated:', event.candidate);\n        socket.emit('ice-candidate', {\n          target: partnerId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Handle connection state changes\n    peerConnectionRef.current.onconnectionstatechange = () => {\n      // Add null check before accessing connectionState\n      if (peerConnectionRef.current) {\n        console.log('Connection state:', peerConnectionRef.current.connectionState);\n      }\n    };\n\n    // Handle ICE connection state changes\n    peerConnectionRef.current.oniceconnectionstatechange = () => {\n      if (peerConnectionRef.current) {\n        console.log('ICE connection state:', peerConnectionRef.current.iceConnectionState);\n      }\n    };\n\n    // Handle receiving remote tracks\n    peerConnectionRef.current.ontrack = event => {\n      console.log('Remote track received:', event);\n      if (remoteVideoRef.current && event.streams[0]) {\n        console.log('Setting remote video stream');\n        remoteVideoRef.current.srcObject = event.streams[0];\n\n        // Add event listener to check if video is actually playing\n        remoteVideoRef.current.onloadedmetadata = () => {\n          console.log('Remote video metadata loaded, playing video');\n          remoteVideoRef.current.play().catch(e => console.error('Error playing remote video:', e));\n        };\n      } else {\n        console.error('Remote video reference is null or no streams available');\n      }\n    };\n  };\n  const createOffer = async () => {\n    try {\n      // Create offer\n      const offer = await peerConnectionRef.current.createOffer();\n      console.log('Offer created:', offer);\n\n      // Set local description\n      await peerConnectionRef.current.setLocalDescription(offer);\n      console.log('Local description set');\n\n      // Send offer to peer via signaling server\n      socket.emit('offer', {\n        target: partnerId,\n        offer: offer\n      });\n      console.log('Offer sent to partner:', partnerId);\n    } catch (error) {\n      console.error('Error creating offer:', error);\n    }\n  };\n  const handleOffer = async data => {\n    try {\n      console.log('Offer received from:', data.from);\n\n      // Create peer connection if it doesn't exist\n      if (!peerConnectionRef.current) {\n        console.log('Creating peer connection for received offer');\n        createPeerConnection();\n      }\n\n      // Set remote description from received offer\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\n      console.log('Remote description set from offer');\n\n      // Create answer\n      const answer = await peerConnectionRef.current.createAnswer();\n      console.log('Answer created');\n\n      // Set local description\n      await peerConnectionRef.current.setLocalDescription(answer);\n      console.log('Local description set for answer');\n\n      // Send answer to peer via signaling server\n      socket.emit('answer', {\n        target: data.from,\n        answer: answer\n      });\n      console.log('Answer sent to:', data.from);\n    } catch (error) {\n      console.error('Error handling offer:', error);\n    }\n  };\n  const handleAnswer = async data => {\n    try {\n      console.log('Answer received from:', data.from);\n\n      // Set remote description from received answer\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n      console.log('Remote description set from answer');\n    } catch (error) {\n      console.error('Error handling answer:', error);\n    }\n  };\n  const handleIceCandidate = async data => {\n    try {\n      console.log('ICE candidate received from:', data.from);\n\n      // Add received ICE candidate\n      if (peerConnectionRef.current) {\n        await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n        console.log('ICE candidate added');\n      } else {\n        console.error('Cannot add ICE candidate: peer connection is null');\n      }\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n    }\n  };\n  const handleUserDisconnected = userId => {\n    if (userId === partnerId) {\n      console.log('Partner disconnected:', userId);\n      // Partner disconnected, end chat\n      handleChatEnded();\n    }\n  };\n  const handleChatEnded = () => {\n    console.log('Chat ended');\n    // Notify parent component that chat has ended\n    if (onEndChat) {\n      onEndChat();\n    }\n  };\n  const stopVideoChat = () => {\n    console.log('Stopping video chat');\n\n    // Stop all tracks in local stream\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log('Track stopped:', track.kind);\n      });\n    }\n\n    // Close peer connection\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n      peerConnectionRef.current = null;\n      console.log('Peer connection closed');\n    }\n  };\n  const toggleMute = () => {\n    if (localStreamRef.current) {\n      const audioTracks = localStreamRef.current.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = !track.enabled;\n        console.log('Audio track enabled:', track.enabled);\n      });\n      setIsMuted(!isMuted);\n    }\n  };\n  const endChat = () => {\n    console.log('End chat requested');\n    // Send end chat signal to partner\n    socket.emit('end-chat', partnerId);\n    // End chat locally\n    handleChatEnded();\n  };\n\n  // Retry camera access\n  const retryCamera = () => {\n    console.log('Retrying camera access');\n    setCameraError(null);\n    setIsConnecting(true);\n    startVideoChat();\n  };\n\n  // Toggle fullscreen mode for local video\n  const toggleLocalFullscreen = () => {\n    // If remote is fullscreen, exit that first\n    if (isRemoteFullscreen) {\n      setIsRemoteFullscreen(false);\n    }\n    setIsLocalFullscreen(!isLocalFullscreen);\n    console.log('Local fullscreen mode:', !isLocalFullscreen);\n  };\n\n  // Toggle fullscreen mode for remote video\n  const toggleRemoteFullscreen = () => {\n    // If local is fullscreen, exit that first\n    if (isLocalFullscreen) {\n      setIsLocalFullscreen(false);\n    }\n    setIsRemoteFullscreen(!isRemoteFullscreen);\n    console.log('Remote fullscreen mode:', !isRemoteFullscreen);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-chat-container\",\n    children: cameraError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Camera Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: cameraError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please make sure your camera and microphone are connected and you've given permission to use them.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: retryCamera,\n          className: \"retry-button\",\n          children: \"Retry Camera Access\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `remote-video-container ${isRemoteFullscreen ? 'fullscreen' : ''}`,\n          onClick: toggleRemoteFullscreen,\n          children: [isConnecting && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connecting-message\",\n            children: \"Connecting...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            className: \"remote-video\",\n            autoPlay: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label stranger-label\",\n            children: [partnerNickname, \"'s Video\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fullscreen-toggle\",\n            onClick: e => {\n              e.stopPropagation();\n              toggleRemoteFullscreen();\n            },\n            children: isRemoteFullscreen ? '×' : '⤢'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `local-video-container ${isLocalFullscreen ? 'fullscreen' : ''}`,\n          onClick: toggleLocalFullscreen,\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            className: \"local-video\",\n            autoPlay: true,\n            playsInline: true,\n            muted: true // Always mute local video to prevent feedback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label self-label\",\n            children: \"Your Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"fullscreen-toggle\",\n            onClick: e => {\n              e.stopPropagation();\n              toggleLocalFullscreen();\n            },\n            children: isLocalFullscreen ? '×' : '⤢'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `control-button ${isMuted ? 'muted' : ''}`,\n          onClick: toggleMute,\n          children: isMuted ? 'Unmute' : 'Mute'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button end-button\",\n          onClick: endChat,\n          children: \"End Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button next-button\",\n          onClick: endChat // Same as end chat for now\n          ,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoChat, \"r69LMnQF51VQ7vtJEOYB+nEVNP0=\");\n_c = VideoChat;\nexport default VideoChat;\nvar _c;\n$RefreshReg$(_c, \"VideoChat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","socket","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoChat","partnerId","onEndChat","_s","localVideoRef","remoteVideoRef","peerConnectionRef","localStreamRef","isMuted","setIsMuted","isConnecting","setIsConnecting","cameraError","setCameraError","partnerNickname","setPartnerNickname","isLocalFullscreen","setIsLocalFullscreen","isRemoteFullscreen","setIsRemoteFullscreen","iceServers","urls","console","log","startVideoChat","on","handleOffer","handleAnswer","handleIceCandidate","handleUserDisconnected","handleChatEnded","stopVideoChat","off","stream","navigator","mediaDevices","getUserMedia","video","audio","current","srcObject","onloadedmetadata","play","catch","e","error","createPeerConnection","getTracks","forEach","track","addTrack","createOffer","message","RTCPeerConnection","onicecandidate","event","candidate","emit","target","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","ontrack","streams","offer","setLocalDescription","data","from","setRemoteDescription","RTCSessionDescription","answer","createAnswer","addIceCandidate","RTCIceCandidate","userId","stop","kind","close","toggleMute","audioTracks","getAudioTracks","enabled","endChat","retryCamera","toggleLocalFullscreen","toggleRemoteFullscreen","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","playsInline","stopPropagation","muted","_c","$RefreshReg$"],"sources":["D:/Project Chat/strengerchat/client/src/components/VideoChat.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport socket from '../socket';\r\n\r\nconst VideoChat = ({ partnerId, onEndChat }) => {\r\n  const localVideoRef = useRef(null);\r\n  const remoteVideoRef = useRef(null);\r\n  const peerConnectionRef = useRef(null);\r\n  const localStreamRef = useRef(null);\r\n  \r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(true);\r\n  const [cameraError, setCameraError] = useState(null);\r\n  const [partnerNickname, setPartnerNickname] = useState('Stranger');\r\n  const [isLocalFullscreen, setIsLocalFullscreen] = useState(false);\r\n  const [isRemoteFullscreen, setIsRemoteFullscreen] = useState(false);\r\n  \r\n  // ICE servers configuration\r\n  const iceServers = {\r\n    iceServers: [\r\n      { urls: 'stun:stun.l.google.com:19302' },\r\n      { urls: 'stun:stun1.l.google.com:19302' },\r\n    ],\r\n  };\r\n  \r\n  useEffect(() => {\r\n    console.log('VideoChat component mounted, partnerId:', partnerId);\r\n    // Start the video chat immediately when component mounts\r\n    startVideoChat();\r\n    \r\n    // Set up WebRTC signaling event listeners\r\n    socket.on('offer', handleOffer);\r\n    socket.on('answer', handleAnswer);\r\n    socket.on('ice-candidate', handleIceCandidate);\r\n    socket.on('user-disconnected', handleUserDisconnected);\r\n    socket.on('chat-ended', handleChatEnded);\r\n    \r\n    // Clean up when component unmounts\r\n    return () => {\r\n      stopVideoChat();\r\n      socket.off('offer', handleOffer);\r\n      socket.off('answer', handleAnswer);\r\n      socket.off('ice-candidate', handleIceCandidate);\r\n      socket.off('user-disconnected', handleUserDisconnected);\r\n      socket.off('chat-ended', handleChatEnded);\r\n    };\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partnerId]);\r\n  \r\n  const startVideoChat = async () => {\r\n    try {\r\n      console.log('Attempting to access camera and microphone...');\r\n      // Get local media stream (camera and microphone)\r\n      const stream = await navigator.mediaDevices.getUserMedia({ \r\n        video: true, \r\n        audio: true \r\n      });\r\n      \r\n      console.log('Camera and microphone access granted:', stream);\r\n      \r\n      // Save stream reference and display in local video element\r\n      localStreamRef.current = stream;\r\n      if (localVideoRef.current) {\r\n        localVideoRef.current.srcObject = stream;\r\n        console.log('Local video element set up with stream');\r\n        \r\n        // Add event listener to check if video is actually playing\r\n        localVideoRef.current.onloadedmetadata = () => {\r\n          console.log('Local video metadata loaded, playing video');\r\n          localVideoRef.current.play().catch(e => console.error('Error playing local video:', e));\r\n        };\r\n      } else {\r\n        console.error('Local video reference is null');\r\n      }\r\n      \r\n      // Create RTCPeerConnection\r\n      createPeerConnection();\r\n      \r\n      // Add local tracks to the peer connection\r\n      stream.getTracks().forEach(track => {\r\n        peerConnectionRef.current.addTrack(track, stream);\r\n      });\r\n      \r\n      // If we have a partner ID, we should initiate the call\r\n      if (partnerId) {\r\n        console.log('Partner ID available, creating offer');\r\n        createOffer();\r\n      }\r\n      \r\n      setIsConnecting(false);\r\n      setCameraError(null);\r\n    } catch (error) {\r\n      console.error('Error starting video chat:', error);\r\n      setIsConnecting(false);\r\n      setCameraError(error.message || 'Could not access camera or microphone');\r\n    }\r\n  };\r\n  \r\n  const createPeerConnection = () => {\r\n    // Create new RTCPeerConnection\r\n    peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n    console.log('Peer connection created');\r\n    \r\n    // Handle ICE candidate events\r\n    peerConnectionRef.current.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        console.log('ICE candidate generated:', event.candidate);\r\n        socket.emit('ice-candidate', {\r\n          target: partnerId,\r\n          candidate: event.candidate,\r\n        });\r\n      }\r\n    };\r\n    \r\n    // Handle connection state changes\r\n    peerConnectionRef.current.onconnectionstatechange = () => {\r\n      // Add null check before accessing connectionState\r\n      if (peerConnectionRef.current) {\r\n        console.log('Connection state:', peerConnectionRef.current.connectionState);\r\n      }\r\n    };\r\n    \r\n    // Handle ICE connection state changes\r\n    peerConnectionRef.current.oniceconnectionstatechange = () => {\r\n      if (peerConnectionRef.current) {\r\n        console.log('ICE connection state:', peerConnectionRef.current.iceConnectionState);\r\n      }\r\n    };\r\n    \r\n    // Handle receiving remote tracks\r\n    peerConnectionRef.current.ontrack = (event) => {\r\n      console.log('Remote track received:', event);\r\n      if (remoteVideoRef.current && event.streams[0]) {\r\n        console.log('Setting remote video stream');\r\n        remoteVideoRef.current.srcObject = event.streams[0];\r\n        \r\n        // Add event listener to check if video is actually playing\r\n        remoteVideoRef.current.onloadedmetadata = () => {\r\n          console.log('Remote video metadata loaded, playing video');\r\n          remoteVideoRef.current.play().catch(e => console.error('Error playing remote video:', e));\r\n        };\r\n      } else {\r\n        console.error('Remote video reference is null or no streams available');\r\n      }\r\n    };\r\n  };\r\n  \r\n  const createOffer = async () => {\r\n    try {\r\n      // Create offer\r\n      const offer = await peerConnectionRef.current.createOffer();\r\n      console.log('Offer created:', offer);\r\n      \r\n      // Set local description\r\n      await peerConnectionRef.current.setLocalDescription(offer);\r\n      console.log('Local description set');\r\n      \r\n      // Send offer to peer via signaling server\r\n      socket.emit('offer', {\r\n        target: partnerId,\r\n        offer: offer,\r\n      });\r\n      console.log('Offer sent to partner:', partnerId);\r\n    } catch (error) {\r\n      console.error('Error creating offer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleOffer = async (data) => {\r\n    try {\r\n      console.log('Offer received from:', data.from);\r\n      \r\n      // Create peer connection if it doesn't exist\r\n      if (!peerConnectionRef.current) {\r\n        console.log('Creating peer connection for received offer');\r\n        createPeerConnection();\r\n      }\r\n      \r\n      // Set remote description from received offer\r\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.offer));\r\n      console.log('Remote description set from offer');\r\n      \r\n      // Create answer\r\n      const answer = await peerConnectionRef.current.createAnswer();\r\n      console.log('Answer created');\r\n      \r\n      // Set local description\r\n      await peerConnectionRef.current.setLocalDescription(answer);\r\n      console.log('Local description set for answer');\r\n      \r\n      // Send answer to peer via signaling server\r\n      socket.emit('answer', {\r\n        target: data.from,\r\n        answer: answer,\r\n      });\r\n      console.log('Answer sent to:', data.from);\r\n    } catch (error) {\r\n      console.error('Error handling offer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleAnswer = async (data) => {\r\n    try {\r\n      console.log('Answer received from:', data.from);\r\n      \r\n      // Set remote description from received answer\r\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\r\n      console.log('Remote description set from answer');\r\n    } catch (error) {\r\n      console.error('Error handling answer:', error);\r\n    }\r\n  };\r\n  \r\n  const handleIceCandidate = async (data) => {\r\n    try {\r\n      console.log('ICE candidate received from:', data.from);\r\n      \r\n      // Add received ICE candidate\r\n      if (peerConnectionRef.current) {\r\n        await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n        console.log('ICE candidate added');\r\n      } else {\r\n        console.error('Cannot add ICE candidate: peer connection is null');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling ICE candidate:', error);\r\n    }\r\n  };\r\n  \r\n  const handleUserDisconnected = (userId) => {\r\n    if (userId === partnerId) {\r\n      console.log('Partner disconnected:', userId);\r\n      // Partner disconnected, end chat\r\n      handleChatEnded();\r\n    }\r\n  };\r\n  \r\n  const handleChatEnded = () => {\r\n    console.log('Chat ended');\r\n    // Notify parent component that chat has ended\r\n    if (onEndChat) {\r\n      onEndChat();\r\n    }\r\n  };\r\n  \r\n  const stopVideoChat = () => {\r\n    console.log('Stopping video chat');\r\n    \r\n    // Stop all tracks in local stream\r\n    if (localStreamRef.current) {\r\n      localStreamRef.current.getTracks().forEach(track => {\r\n        track.stop();\r\n        console.log('Track stopped:', track.kind);\r\n      });\r\n    }\r\n    \r\n    // Close peer connection\r\n    if (peerConnectionRef.current) {\r\n      peerConnectionRef.current.close();\r\n      peerConnectionRef.current = null;\r\n      console.log('Peer connection closed');\r\n    }\r\n  };\r\n  \r\n  const toggleMute = () => {\r\n    if (localStreamRef.current) {\r\n      const audioTracks = localStreamRef.current.getAudioTracks();\r\n      audioTracks.forEach(track => {\r\n        track.enabled = !track.enabled;\r\n        console.log('Audio track enabled:', track.enabled);\r\n      });\r\n      setIsMuted(!isMuted);\r\n    }\r\n  };\r\n  \r\n  const endChat = () => {\r\n    console.log('End chat requested');\r\n    // Send end chat signal to partner\r\n    socket.emit('end-chat', partnerId);\r\n    // End chat locally\r\n    handleChatEnded();\r\n  };\r\n  \r\n  // Retry camera access\r\n  const retryCamera = () => {\r\n    console.log('Retrying camera access');\r\n    setCameraError(null);\r\n    setIsConnecting(true);\r\n    startVideoChat();\r\n  };\r\n  \r\n  // Toggle fullscreen mode for local video\r\n  const toggleLocalFullscreen = () => {\r\n    // If remote is fullscreen, exit that first\r\n    if (isRemoteFullscreen) {\r\n      setIsRemoteFullscreen(false);\r\n    }\r\n    setIsLocalFullscreen(!isLocalFullscreen);\r\n    console.log('Local fullscreen mode:', !isLocalFullscreen);\r\n  };\r\n  \r\n  // Toggle fullscreen mode for remote video\r\n  const toggleRemoteFullscreen = () => {\r\n    // If local is fullscreen, exit that first\r\n    if (isLocalFullscreen) {\r\n      setIsLocalFullscreen(false);\r\n    }\r\n    setIsRemoteFullscreen(!isRemoteFullscreen);\r\n    console.log('Remote fullscreen mode:', !isRemoteFullscreen);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"video-chat-container\">\r\n      {cameraError ? (\r\n        <div className=\"camera-error\">\r\n          <div className=\"error-message\">\r\n            <h3>Camera Error</h3>\r\n            <p>{cameraError}</p>\r\n            <p>Please make sure your camera and microphone are connected and you've given permission to use them.</p>\r\n            <button onClick={retryCamera} className=\"retry-button\">\r\n              Retry Camera Access\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"video-grid\">\r\n            {/* Remote video (larger) */}\r\n            <div \r\n              className={`remote-video-container ${isRemoteFullscreen ? 'fullscreen' : ''}`}\r\n              onClick={toggleRemoteFullscreen}\r\n            >\r\n              {isConnecting && <div className=\"connecting-message\">Connecting...</div>}\r\n              <video \r\n                ref={remoteVideoRef} \r\n                className=\"remote-video\" \r\n                autoPlay \r\n                playsInline\r\n              />\r\n              <div className=\"video-label stranger-label\">{partnerNickname}'s Video</div>\r\n              <button \r\n                className=\"fullscreen-toggle\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleRemoteFullscreen();\r\n                }}\r\n              >\r\n                {isRemoteFullscreen ? '×' : '⤢'}\r\n              </button>\r\n            </div>\r\n            \r\n            {/* Local video (smaller, picture-in-picture) */}\r\n            <div \r\n              className={`local-video-container ${isLocalFullscreen ? 'fullscreen' : ''}`}\r\n              onClick={toggleLocalFullscreen}\r\n            >\r\n              <video \r\n                ref={localVideoRef} \r\n                className=\"local-video\" \r\n                autoPlay \r\n                playsInline \r\n                muted // Always mute local video to prevent feedback\r\n              />\r\n              <div className=\"video-label self-label\">Your Video</div>\r\n              <button \r\n                className=\"fullscreen-toggle\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  toggleLocalFullscreen();\r\n                }}\r\n              >\r\n                {isLocalFullscreen ? '×' : '⤢'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Video controls */}\r\n          <div className=\"video-controls\">\r\n            <button \r\n              className={`control-button ${isMuted ? 'muted' : ''}`}\r\n              onClick={toggleMute}\r\n            >\r\n              {isMuted ? 'Unmute' : 'Mute'}\r\n            </button>\r\n            \r\n            <button \r\n              className=\"control-button end-button\"\r\n              onClick={endChat}\r\n            >\r\n              End Chat\r\n            </button>\r\n            \r\n            <button \r\n              className=\"control-button next-button\"\r\n              onClick={endChat} // Same as end chat for now\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}