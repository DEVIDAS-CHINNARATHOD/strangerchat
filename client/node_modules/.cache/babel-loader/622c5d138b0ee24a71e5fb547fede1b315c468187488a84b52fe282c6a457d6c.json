{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Chat\\\\strengerchat\\\\client\\\\src\\\\components\\\\AdminPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport socket from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminPanel = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [password, setPassword] = useState('');\n  const [users, setUsers] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [selectedConnection, setSelectedConnection] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [stats, setStats] = useState({\n    activeUsers: 0,\n    activeConnections: 0,\n    totalConnections: 0,\n    lobbyUsers: 0,\n    randomQueue: 0\n  });\n\n  // Refs for remote video streams\n  const videoRefs = useRef({});\n  // Store peer connections for admin monitoring\n  const peerConnectionsRef = useRef({});\n  useEffect(() => {\n    // Ensure socket is connected\n    if (!socket.connected) {\n      console.log('Socket not connected, connecting now...');\n      socket.connect();\n    }\n    console.log('Setting up admin event listeners');\n\n    // Set up socket event listeners for admin\n    socket.on('admin-data', handleAdminData);\n    socket.on('admin-users-update', handleUsersUpdate);\n    socket.on('admin-connection-update', handleConnectionUpdate);\n    socket.on('admin-message-update', handleMessageUpdate);\n    socket.on('admin-chat-history', handleChatHistory);\n    socket.on('admin-login-failed', handleLoginFailed);\n    socket.on('admin-monitor-stream', handleMonitorStream);\n    socket.on('admin-webrtc-update', handleWebRTCUpdate);\n    socket.on('admin-ice-candidate', handleIceCandidate);\n    socket.on('admin-monitor-error', handleMonitorError);\n\n    // Clean up when component unmounts\n    return () => {\n      console.log('Cleaning up admin event listeners');\n      socket.off('admin-data', handleAdminData);\n      socket.off('admin-users-update', handleUsersUpdate);\n      socket.off('admin-connection-update', handleConnectionUpdate);\n      socket.off('admin-message-update', handleMessageUpdate);\n      socket.off('admin-chat-history', handleChatHistory);\n      socket.off('admin-login-failed', handleLoginFailed);\n      socket.off('admin-monitor-stream', handleMonitorStream);\n      socket.off('admin-webrtc-update', handleWebRTCUpdate);\n      socket.off('admin-ice-candidate', handleIceCandidate);\n      socket.off('admin-monitor-error', handleMonitorError);\n\n      // Close all peer connections\n      Object.values(peerConnectionsRef.current).forEach(pc => {\n        if (pc) pc.close();\n      });\n    };\n  }, []);\n\n  // Handle admin data received after login\n  const handleAdminData = data => {\n    console.log('Received admin data:', data);\n    setUsers(data.users || []);\n    setConnections(data.connections || []);\n    setIsLoggedIn(true);\n\n    // Update stats\n    setStats({\n      activeUsers: (data.users || []).filter(user => user.status !== 'idle').length,\n      activeConnections: (data.connections || []).filter(conn => !conn.endTime).length,\n      totalConnections: (data.connections || []).length,\n      lobbyUsers: (data.lobbyUsers || []).length,\n      randomQueue: (data.randomQueue || []).length\n    });\n  };\n\n  // Handle updates to user list\n  const handleUsersUpdate = updatedUsers => {\n    console.log('Received users update:', updatedUsers);\n    setUsers(updatedUsers || []);\n\n    // Update active users stat\n    setStats(prevStats => ({\n      ...prevStats,\n      activeUsers: (updatedUsers || []).filter(user => user.status !== 'idle').length\n    }));\n  };\n\n  // Handle updates to connections\n  const handleConnectionUpdate = data => {\n    console.log('Received connection update:', data);\n    const updatedConnections = data.connections || [];\n    setConnections(updatedConnections);\n\n    // If the currently selected connection has ended, deselect it\n    if (selectedConnection && updatedConnections.find(c => c.id === selectedConnection.id && c.endTime)) {\n      setSelectedConnection(null);\n      setChatMessages([]);\n\n      // Close peer connections for this ended connection\n      if (selectedConnection.users) {\n        selectedConnection.users.forEach(userId => {\n          if (peerConnectionsRef.current[userId]) {\n            peerConnectionsRef.current[userId].close();\n            delete peerConnectionsRef.current[userId];\n          }\n        });\n      }\n    }\n    if (data.users) {\n      setUsers(data.users);\n    }\n\n    // Update connection stats\n    setStats(prevStats => ({\n      ...prevStats,\n      activeConnections: updatedConnections.filter(conn => !conn.endTime).length,\n      totalConnections: updatedConnections.length\n    }));\n  };\n\n  // Handle new messages in monitored chats\n  const handleMessageUpdate = data => {\n    console.log('Received message update:', data);\n    if (selectedConnection && selectedConnection.id === data.connectionId) {\n      setChatMessages(data.messages || []);\n    }\n  };\n\n  // Handle chat history response\n  const handleChatHistory = data => {\n    console.log('Received chat history:', data);\n    setChatMessages(data.messages || []);\n  };\n\n  // Handle login failure\n  const handleLoginFailed = () => {\n    console.log('Login failed');\n    alert('Admin login failed. Incorrect password.');\n  };\n\n  // Handle WebRTC updates from users\n  const handleWebRTCUpdate = data => {\n    console.log('Received WebRTC update:', data);\n    if (selectedConnection && selectedConnection.id === data.connectionId) {\n      // If we're monitoring this connection, request the streams\n      requestStreams(selectedConnection);\n    }\n  };\n\n  // Handle monitor stream from user\n  const handleMonitorStream = async data => {\n    console.log('Received monitor stream:', data);\n    try {\n      // Create a new RTCPeerConnection if it doesn't exist\n      if (!peerConnectionsRef.current[data.userId]) {\n        const iceServers = {\n          iceServers: [{\n            urls: 'stun:stun.l.google.com:19302'\n          }, {\n            urls: 'stun:stun1.l.google.com:19302'\n          }, {\n            urls: 'stun:stun2.l.google.com:19302'\n          }]\n        };\n        const pc = new RTCPeerConnection(iceServers);\n        peerConnectionsRef.current[data.userId] = pc;\n\n        // Handle ICE candidates\n        pc.onicecandidate = event => {\n          if (event.candidate) {\n            console.log('Admin ICE candidate generated:', event.candidate);\n            socket.emit('admin-ice-candidate', {\n              target: data.userId,\n              candidate: event.candidate\n            });\n          }\n        };\n\n        // Handle incoming tracks\n        pc.ontrack = event => {\n          console.log('Admin received track from user:', data.userId, event);\n          if (videoRefs.current[data.userId]) {\n            const videoElement = videoRefs.current[data.userId];\n            videoElement.srcObject = event.streams[0];\n\n            // Add event listener to check if video is actually playing\n            videoElement.onloadedmetadata = () => {\n              console.log('Admin video metadata loaded, playing video');\n              videoElement.play().catch(e => console.error('Error playing admin video:', e));\n            };\n          }\n        };\n      }\n      const pc = peerConnectionsRef.current[data.userId];\n\n      // Set remote description (the offer from the user)\n      await pc.setRemoteDescription(new RTCSessionDescription(data.offer));\n\n      // Create answer\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n\n      // Send answer to the user\n      socket.emit('admin-stream-answer', {\n        userId: data.userId,\n        answer: answer\n      });\n      console.log('Sent stream answer to user:', data.userId);\n    } catch (error) {\n      console.error('Error handling monitor stream:', error);\n    }\n  };\n\n  // Handle ICE candidate from user\n  const handleIceCandidate = async data => {\n    try {\n      console.log('ICE candidate received from:', data.from);\n      const pc = peerConnectionsRef.current[data.from];\n      if (pc) {\n        await pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n        console.log('ICE candidate added for user:', data.from);\n      } else {\n        console.error('No peer connection found for user:', data.from);\n      }\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n    }\n  };\n\n  // Handle monitor error\n  const handleMonitorError = data => {\n    console.error('Monitor error:', data.error);\n    alert(`Error monitoring connection: ${data.error}`);\n  };\n\n  // Handle login form submission\n  const handleLogin = e => {\n    e.preventDefault();\n    console.log('Login attempt with password:', password);\n    socket.emit('admin-login', password);\n  };\n\n  // Direct login button click handler\n  const handleLoginButtonClick = () => {\n    console.log('Login button clicked, password:', password);\n    socket.emit('admin-login', password);\n  };\n\n  // Select a connection to monitor\n  const selectConnection = connection => {\n    // Clean up previous peer connections if selecting a different connection\n    if (selectedConnection && selectedConnection.id !== connection.id) {\n      selectedConnection.users.forEach(userId => {\n        if (peerConnectionsRef.current[userId]) {\n          peerConnectionsRef.current[userId].close();\n          delete peerConnectionsRef.current[userId];\n        }\n      });\n    }\n    setSelectedConnection(connection);\n    setChatMessages([]);\n    socket.emit('admin-get-chat', connection.id);\n\n    // Request video streams immediately when selecting a connection\n    requestStreams(connection);\n  };\n\n  // Request WebRTC streams for a connection\n  const requestStreams = connection => {\n    console.log('Requesting streams for connection:', connection.id);\n    socket.emit('admin-monitor-streams', connection.id);\n  };\n\n  // Fetch updated stats\n  const fetchStats = async () => {\n    try {\n      const response = await fetch('/api/admin/stats', {\n        headers: {\n          'X-API-Key': password\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setStats(data);\n      }\n    } catch (error) {\n      console.error('Error fetching admin stats:', error);\n    }\n  };\n\n  // Refresh all data\n  const refreshData = () => {\n    socket.emit('admin-login', password);\n    fetchStats();\n\n    // If a connection is selected, request streams again\n    if (selectedConnection) {\n      requestStreams(selectedConnection);\n    }\n  };\n\n  // Get user nickname by ID\n  const getUserNickname = userId => {\n    const user = users.find(u => u.id === userId);\n    return user ? user.nickname || 'Anonymous' : 'Unknown';\n  };\n\n  // Format time duration\n  const formatDuration = (startTime, endTime) => {\n    const start = new Date(startTime);\n    const end = endTime ? new Date(endTime) : new Date();\n    const diffMs = end - start;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffSecs = Math.floor(diffMs % 60000 / 1000);\n    return `${diffMins}m ${diffSecs}s`;\n  };\n\n  // Login form\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-login\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Admin Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          placeholder: \"Admin Password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleLoginButtonClick,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-help\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Default password: admin123\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Socket connected: \", socket.connected ? 'Yes' : 'No']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Filter active connections (no endTime)\n  const activeConnectionsList = connections.filter(conn => !conn.endTime);\n\n  // Admin dashboard\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"StrengerChat Admin Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshData,\n          children: \"Refresh Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.activeUsers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Active Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.activeConnections\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Active Chats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.lobbyUsers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"In Lobby\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.randomQueue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Waiting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-value\",\n          children: stats.totalConnections\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Total Connections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-users\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Active Users (\", users.filter(user => user.status !== 'idle').length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-list\",\n          children: users.filter(user => user.status !== 'idle').map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `admin-user ${user.status}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-id\",\n              children: user.id.substring(0, 8)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-nickname\",\n              children: user.nickname || 'Anonymous'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-status\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `status-indicator ${user.status}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 21\n              }, this), user.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-time\",\n              children: new Date(user.connectionTime).toLocaleTimeString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 19\n            }, this)]\n          }, user.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-connections\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Active Connections (\", activeConnectionsList.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-list\",\n          children: [activeConnectionsList.map(connection => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `admin-connection ${selectedConnection && selectedConnection.id === connection.id ? 'selected' : ''}`,\n            onClick: () => selectConnection(connection),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"connection-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"connection-users\",\n                children: connection.users.map(userId => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"connection-user\",\n                  children: getUserNickname(userId)\n                }, userId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 23\n                }, this)).reduce((prev, curr) => [prev, ' ↔ ', curr])\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"connection-type\",\n                children: connection.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"connection-time\",\n                children: [\"Started: \", new Date(connection.startTime).toLocaleTimeString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 21\n                }, this), \"Duration: \", formatDuration(connection.startTime)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"monitor-button\",\n              onClick: e => {\n                e.stopPropagation();\n                requestStreams(connection);\n              },\n              children: \"Monitor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this)]\n          }, connection.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)), activeConnectionsList.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-connections\",\n            children: \"No active connections\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), selectedConnection && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-monitor\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Monitoring Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"monitor-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection-id\",\n            children: [\"ID: \", selectedConnection.id.substring(0, 10)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection-type\",\n            children: [\"Type: \", selectedConnection.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"refresh-streams-button\",\n            onClick: () => requestStreams(selectedConnection),\n            children: \"Refresh Streams\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-streams\",\n          children: selectedConnection.users.map(userId => {\n            var _videoRefs$current$us;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stream-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: getUserNickname(userId)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n                ref: el => {\n                  if (el) videoRefs.current[userId] = el;\n                },\n                className: \"admin-video\",\n                autoPlay: true,\n                playsInline: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"video-status\",\n                children: !((_videoRefs$current$us = videoRefs.current[userId]) !== null && _videoRefs$current$us !== void 0 && _videoRefs$current$us.srcObject) && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"loading-video\",\n                  children: \"Loading video stream...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 19\n              }, this)]\n            }, userId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Chat Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\",\n            children: chatMessages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-messages\",\n              children: \"No messages yet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 19\n            }, this) : chatMessages.map((message, index) => {\n              const isUser1 = message.from === selectedConnection.users[0];\n              const sender = isUser1 ? getUserNickname(selectedConnection.users[0]) : getUserNickname(selectedConnection.users[1]);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `message ${isUser1 ? 'user-1' : 'user-2'}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-sender\",\n                  children: sender\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-content\",\n                  children: message.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-timestamp\",\n                  children: new Date(message.timestamp).toLocaleTimeString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 366,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminPanel, \"zxaGysohsOpkZQ1eM6+Ql5nUJ2M=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","jsxDEV","_jsxDEV","AdminPanel","_s","isLoggedIn","setIsLoggedIn","password","setPassword","users","setUsers","connections","setConnections","selectedConnection","setSelectedConnection","chatMessages","setChatMessages","stats","setStats","activeUsers","activeConnections","totalConnections","lobbyUsers","randomQueue","videoRefs","peerConnectionsRef","connected","console","log","connect","on","handleAdminData","handleUsersUpdate","handleConnectionUpdate","handleMessageUpdate","handleChatHistory","handleLoginFailed","handleMonitorStream","handleWebRTCUpdate","handleIceCandidate","handleMonitorError","off","Object","values","current","forEach","pc","close","data","filter","user","status","length","conn","endTime","updatedUsers","prevStats","updatedConnections","find","c","id","userId","connectionId","messages","alert","requestStreams","iceServers","urls","RTCPeerConnection","onicecandidate","event","candidate","emit","target","ontrack","videoElement","srcObject","streams","onloadedmetadata","play","catch","e","error","setRemoteDescription","RTCSessionDescription","offer","answer","createAnswer","setLocalDescription","from","addIceCandidate","RTCIceCandidate","handleLogin","preventDefault","handleLoginButtonClick","selectConnection","connection","fetchStats","response","fetch","headers","ok","json","refreshData","getUserNickname","u","nickname","formatDuration","startTime","start","Date","end","diffMs","diffMins","Math","floor","diffSecs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","placeholder","required","onClick","activeConnectionsList","map","substring","connectionTime","toLocaleTimeString","reduce","prev","curr","stopPropagation","_videoRefs$current$us","ref","el","autoPlay","playsInline","message","index","isUser1","sender","content","timestamp","_c","$RefreshReg$"],"sources":["D:/Project Chat/strengerchat/client/src/components/AdminPanel.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport socket from '../socket';\r\n\r\nconst AdminPanel = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n  const [users, setUsers] = useState([]);\r\n  const [connections, setConnections] = useState([]);\r\n  const [selectedConnection, setSelectedConnection] = useState(null);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [stats, setStats] = useState({\r\n    activeUsers: 0,\r\n    activeConnections: 0,\r\n    totalConnections: 0,\r\n    lobbyUsers: 0,\r\n    randomQueue: 0\r\n  });\r\n  \r\n  // Refs for remote video streams\r\n  const videoRefs = useRef({});\r\n  // Store peer connections for admin monitoring\r\n  const peerConnectionsRef = useRef({});\r\n  \r\n  useEffect(() => {\r\n    // Ensure socket is connected\r\n    if (!socket.connected) {\r\n      console.log('Socket not connected, connecting now...');\r\n      socket.connect();\r\n    }\r\n    \r\n    console.log('Setting up admin event listeners');\r\n    \r\n    // Set up socket event listeners for admin\r\n    socket.on('admin-data', handleAdminData);\r\n    socket.on('admin-users-update', handleUsersUpdate);\r\n    socket.on('admin-connection-update', handleConnectionUpdate);\r\n    socket.on('admin-message-update', handleMessageUpdate);\r\n    socket.on('admin-chat-history', handleChatHistory);\r\n    socket.on('admin-login-failed', handleLoginFailed);\r\n    socket.on('admin-monitor-stream', handleMonitorStream);\r\n    socket.on('admin-webrtc-update', handleWebRTCUpdate);\r\n    socket.on('admin-ice-candidate', handleIceCandidate);\r\n    socket.on('admin-monitor-error', handleMonitorError);\r\n    \r\n    // Clean up when component unmounts\r\n    return () => {\r\n      console.log('Cleaning up admin event listeners');\r\n      socket.off('admin-data', handleAdminData);\r\n      socket.off('admin-users-update', handleUsersUpdate);\r\n      socket.off('admin-connection-update', handleConnectionUpdate);\r\n      socket.off('admin-message-update', handleMessageUpdate);\r\n      socket.off('admin-chat-history', handleChatHistory);\r\n      socket.off('admin-login-failed', handleLoginFailed);\r\n      socket.off('admin-monitor-stream', handleMonitorStream);\r\n      socket.off('admin-webrtc-update', handleWebRTCUpdate);\r\n      socket.off('admin-ice-candidate', handleIceCandidate);\r\n      socket.off('admin-monitor-error', handleMonitorError);\r\n      \r\n      // Close all peer connections\r\n      Object.values(peerConnectionsRef.current).forEach(pc => {\r\n        if (pc) pc.close();\r\n      });\r\n    };\r\n  }, []);\r\n  \r\n  // Handle admin data received after login\r\n  const handleAdminData = (data) => {\r\n    console.log('Received admin data:', data);\r\n    setUsers(data.users || []);\r\n    setConnections(data.connections || []);\r\n    setIsLoggedIn(true);\r\n    \r\n    // Update stats\r\n    setStats({\r\n      activeUsers: (data.users || []).filter(user => user.status !== 'idle').length,\r\n      activeConnections: (data.connections || []).filter(conn => !conn.endTime).length,\r\n      totalConnections: (data.connections || []).length,\r\n      lobbyUsers: (data.lobbyUsers || []).length,\r\n      randomQueue: (data.randomQueue || []).length\r\n    });\r\n  };\r\n  \r\n  // Handle updates to user list\r\n  const handleUsersUpdate = (updatedUsers) => {\r\n    console.log('Received users update:', updatedUsers);\r\n    setUsers(updatedUsers || []);\r\n    \r\n    // Update active users stat\r\n    setStats(prevStats => ({\r\n      ...prevStats,\r\n      activeUsers: (updatedUsers || []).filter(user => user.status !== 'idle').length\r\n    }));\r\n  };\r\n  \r\n  // Handle updates to connections\r\n  const handleConnectionUpdate = (data) => {\r\n    console.log('Received connection update:', data);\r\n    const updatedConnections = data.connections || [];\r\n    setConnections(updatedConnections);\r\n    \r\n    // If the currently selected connection has ended, deselect it\r\n    if (selectedConnection && \r\n        updatedConnections.find(c => c.id === selectedConnection.id && c.endTime)) {\r\n      setSelectedConnection(null);\r\n      setChatMessages([]);\r\n      \r\n      // Close peer connections for this ended connection\r\n      if (selectedConnection.users) {\r\n        selectedConnection.users.forEach(userId => {\r\n          if (peerConnectionsRef.current[userId]) {\r\n            peerConnectionsRef.current[userId].close();\r\n            delete peerConnectionsRef.current[userId];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    \r\n    if (data.users) {\r\n      setUsers(data.users);\r\n    }\r\n    \r\n    // Update connection stats\r\n    setStats(prevStats => ({\r\n      ...prevStats,\r\n      activeConnections: updatedConnections.filter(conn => !conn.endTime).length,\r\n      totalConnections: updatedConnections.length\r\n    }));\r\n  };\r\n  \r\n  // Handle new messages in monitored chats\r\n  const handleMessageUpdate = (data) => {\r\n    console.log('Received message update:', data);\r\n    if (selectedConnection && selectedConnection.id === data.connectionId) {\r\n      setChatMessages(data.messages || []);\r\n    }\r\n  };\r\n  \r\n  // Handle chat history response\r\n  const handleChatHistory = (data) => {\r\n    console.log('Received chat history:', data);\r\n    setChatMessages(data.messages || []);\r\n  };\r\n  \r\n  // Handle login failure\r\n  const handleLoginFailed = () => {\r\n    console.log('Login failed');\r\n    alert('Admin login failed. Incorrect password.');\r\n  };\r\n  \r\n  // Handle WebRTC updates from users\r\n  const handleWebRTCUpdate = (data) => {\r\n    console.log('Received WebRTC update:', data);\r\n    if (selectedConnection && selectedConnection.id === data.connectionId) {\r\n      // If we're monitoring this connection, request the streams\r\n      requestStreams(selectedConnection);\r\n    }\r\n  };\r\n  \r\n  // Handle monitor stream from user\r\n  const handleMonitorStream = async (data) => {\r\n    console.log('Received monitor stream:', data);\r\n    \r\n    try {\r\n      // Create a new RTCPeerConnection if it doesn't exist\r\n      if (!peerConnectionsRef.current[data.userId]) {\r\n        const iceServers = {\r\n          iceServers: [\r\n            { urls: 'stun:stun.l.google.com:19302' },\r\n            { urls: 'stun:stun1.l.google.com:19302' },\r\n            { urls: 'stun:stun2.l.google.com:19302' },\r\n          ],\r\n        };\r\n        \r\n        const pc = new RTCPeerConnection(iceServers);\r\n        peerConnectionsRef.current[data.userId] = pc;\r\n        \r\n        // Handle ICE candidates\r\n        pc.onicecandidate = (event) => {\r\n          if (event.candidate) {\r\n            console.log('Admin ICE candidate generated:', event.candidate);\r\n            socket.emit('admin-ice-candidate', {\r\n              target: data.userId,\r\n              candidate: event.candidate,\r\n            });\r\n          }\r\n        };\r\n        \r\n        // Handle incoming tracks\r\n        pc.ontrack = (event) => {\r\n          console.log('Admin received track from user:', data.userId, event);\r\n          if (videoRefs.current[data.userId]) {\r\n            const videoElement = videoRefs.current[data.userId];\r\n            videoElement.srcObject = event.streams[0];\r\n            \r\n            // Add event listener to check if video is actually playing\r\n            videoElement.onloadedmetadata = () => {\r\n              console.log('Admin video metadata loaded, playing video');\r\n              videoElement.play()\r\n                .catch(e => console.error('Error playing admin video:', e));\r\n            };\r\n          }\r\n        };\r\n      }\r\n      \r\n      const pc = peerConnectionsRef.current[data.userId];\r\n      \r\n      // Set remote description (the offer from the user)\r\n      await pc.setRemoteDescription(new RTCSessionDescription(data.offer));\r\n      \r\n      // Create answer\r\n      const answer = await pc.createAnswer();\r\n      await pc.setLocalDescription(answer);\r\n      \r\n      // Send answer to the user\r\n      socket.emit('admin-stream-answer', {\r\n        userId: data.userId,\r\n        answer: answer\r\n      });\r\n      \r\n      console.log('Sent stream answer to user:', data.userId);\r\n    } catch (error) {\r\n      console.error('Error handling monitor stream:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle ICE candidate from user\r\n  const handleIceCandidate = async (data) => {\r\n    try {\r\n      console.log('ICE candidate received from:', data.from);\r\n      \r\n      const pc = peerConnectionsRef.current[data.from];\r\n      if (pc) {\r\n        await pc.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n        console.log('ICE candidate added for user:', data.from);\r\n      } else {\r\n        console.error('No peer connection found for user:', data.from);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling ICE candidate:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle monitor error\r\n  const handleMonitorError = (data) => {\r\n    console.error('Monitor error:', data.error);\r\n    alert(`Error monitoring connection: ${data.error}`);\r\n  };\r\n  \r\n  // Handle login form submission\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    console.log('Login attempt with password:', password);\r\n    socket.emit('admin-login', password);\r\n  };\r\n  \r\n  // Direct login button click handler\r\n  const handleLoginButtonClick = () => {\r\n    console.log('Login button clicked, password:', password);\r\n    socket.emit('admin-login', password);\r\n  };\r\n  \r\n  // Select a connection to monitor\r\n  const selectConnection = (connection) => {\r\n    // Clean up previous peer connections if selecting a different connection\r\n    if (selectedConnection && selectedConnection.id !== connection.id) {\r\n      selectedConnection.users.forEach(userId => {\r\n        if (peerConnectionsRef.current[userId]) {\r\n          peerConnectionsRef.current[userId].close();\r\n          delete peerConnectionsRef.current[userId];\r\n        }\r\n      });\r\n    }\r\n    \r\n    setSelectedConnection(connection);\r\n    setChatMessages([]);\r\n    socket.emit('admin-get-chat', connection.id);\r\n    \r\n    // Request video streams immediately when selecting a connection\r\n    requestStreams(connection);\r\n  };\r\n  \r\n  // Request WebRTC streams for a connection\r\n  const requestStreams = (connection) => {\r\n    console.log('Requesting streams for connection:', connection.id);\r\n    socket.emit('admin-monitor-streams', connection.id);\r\n  };\r\n  \r\n  // Fetch updated stats\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await fetch('/api/admin/stats', {\r\n        headers: {\r\n          'X-API-Key': password\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setStats(data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching admin stats:', error);\r\n    }\r\n  };\r\n  \r\n  // Refresh all data\r\n  const refreshData = () => {\r\n    socket.emit('admin-login', password);\r\n    fetchStats();\r\n    \r\n    // If a connection is selected, request streams again\r\n    if (selectedConnection) {\r\n      requestStreams(selectedConnection);\r\n    }\r\n  };\r\n  \r\n  // Get user nickname by ID\r\n  const getUserNickname = (userId) => {\r\n    const user = users.find(u => u.id === userId);\r\n    return user ? user.nickname || 'Anonymous' : 'Unknown';\r\n  };\r\n  \r\n  // Format time duration\r\n  const formatDuration = (startTime, endTime) => {\r\n    const start = new Date(startTime);\r\n    const end = endTime ? new Date(endTime) : new Date();\r\n    const diffMs = end - start;\r\n    const diffMins = Math.floor(diffMs / 60000);\r\n    const diffSecs = Math.floor((diffMs % 60000) / 1000);\r\n    return `${diffMins}m ${diffSecs}s`;\r\n  };\r\n  \r\n  // Login form\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <div className=\"admin-login\">\r\n        <h2>Admin Login</h2>\r\n        <form onSubmit={handleLogin}>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Admin Password\"\r\n            required\r\n          />\r\n          <button \r\n            type=\"button\" \r\n            onClick={handleLoginButtonClick}\r\n          >\r\n            Login\r\n          </button>\r\n        </form>\r\n        <div className=\"login-help\">\r\n          <p>Default password: admin123</p>\r\n          <p>Socket connected: {socket.connected ? 'Yes' : 'No'}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Filter active connections (no endTime)\r\n  const activeConnectionsList = connections.filter(conn => !conn.endTime);\r\n  \r\n  // Admin dashboard\r\n  return (\r\n    <div className=\"admin-panel\">\r\n      <div className=\"admin-header\">\r\n        <h2>StrengerChat Admin Panel</h2>\r\n        <div className=\"admin-controls\">\r\n          <button onClick={refreshData}>Refresh Data</button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"admin-stats\">\r\n        <div className=\"stat-item\">\r\n          <div className=\"stat-value\">{stats.activeUsers}</div>\r\n          <div className=\"stat-label\">Active Users</div>\r\n        </div>\r\n        <div className=\"stat-item\">\r\n          <div className=\"stat-value\">{stats.activeConnections}</div>\r\n          <div className=\"stat-label\">Active Chats</div>\r\n        </div>\r\n        <div className=\"stat-item\">\r\n          <div className=\"stat-value\">{stats.lobbyUsers}</div>\r\n          <div className=\"stat-label\">In Lobby</div>\r\n        </div>\r\n        <div className=\"stat-item\">\r\n          <div className=\"stat-value\">{stats.randomQueue}</div>\r\n          <div className=\"stat-label\">Waiting</div>\r\n        </div>\r\n        <div className=\"stat-item\">\r\n          <div className=\"stat-value\">{stats.totalConnections}</div>\r\n          <div className=\"stat-label\">Total Connections</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"admin-content\">\r\n        <div className=\"admin-users\">\r\n          <h3>Active Users ({users.filter(user => user.status !== 'idle').length})</h3>\r\n          <div className=\"user-list\">\r\n            {users\r\n              .filter(user => user.status !== 'idle')\r\n              .map(user => (\r\n                <div key={user.id} className={`admin-user ${user.status}`}>\r\n                  <div className=\"user-id\">{user.id.substring(0, 8)}</div>\r\n                  <div className=\"user-nickname\">{user.nickname || 'Anonymous'}</div>\r\n                  <div className=\"user-status\">\r\n                    <span className={`status-indicator ${user.status}`}></span>\r\n                    {user.status}\r\n                  </div>\r\n                  <div className=\"user-time\">\r\n                    {new Date(user.connectionTime).toLocaleTimeString()}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"admin-connections\">\r\n          <h3>Active Connections ({activeConnectionsList.length})</h3>\r\n          <div className=\"connection-list\">\r\n            {activeConnectionsList.map(connection => (\r\n              <div \r\n                key={connection.id} \r\n                className={`admin-connection ${selectedConnection && selectedConnection.id === connection.id ? 'selected' : ''}`}\r\n                onClick={() => selectConnection(connection)}\r\n              >\r\n                <div className=\"connection-details\">\r\n                  <div className=\"connection-users\">\r\n                    {connection.users.map(userId => (\r\n                      <span key={userId} className=\"connection-user\">\r\n                        {getUserNickname(userId)}\r\n                      </span>\r\n                    )).reduce((prev, curr) => [prev, ' ↔ ', curr])}\r\n                  </div>\r\n                  <div className=\"connection-type\">{connection.type}</div>\r\n                  <div className=\"connection-time\">\r\n                    Started: {new Date(connection.startTime).toLocaleTimeString()}\r\n                    <br />\r\n                    Duration: {formatDuration(connection.startTime)}\r\n                  </div>\r\n                </div>\r\n                <button \r\n                  className=\"monitor-button\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    requestStreams(connection);\r\n                  }}\r\n                >\r\n                  Monitor\r\n                </button>\r\n              </div>\r\n            ))}\r\n            {activeConnectionsList.length === 0 && (\r\n              <div className=\"no-connections\">No active connections</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {selectedConnection && (\r\n          <div className=\"admin-monitor\">\r\n            <h3>Monitoring Connection</h3>\r\n            <div className=\"monitor-header\">\r\n              <div className=\"connection-id\">ID: {selectedConnection.id.substring(0, 10)}</div>\r\n              <div className=\"connection-type\">Type: {selectedConnection.type}</div>\r\n              <button \r\n                className=\"refresh-streams-button\"\r\n                onClick={() => requestStreams(selectedConnection)}\r\n              >\r\n                Refresh Streams\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"video-streams\">\r\n              {selectedConnection.users.map(userId => (\r\n                <div key={userId} className=\"stream-container\">\r\n                  <h4>{getUserNickname(userId)}</h4>\r\n                  <video\r\n                    ref={el => { if (el) videoRefs.current[userId] = el; }}\r\n                    className=\"admin-video\"\r\n                    autoPlay\r\n                    playsInline\r\n                  />\r\n                  <div className=\"video-status\">\r\n                    {!videoRefs.current[userId]?.srcObject && \r\n                      <span className=\"loading-video\">Loading video stream...</span>\r\n                    }\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            \r\n            <div className=\"chat-messages\">\r\n              <h4>Chat Messages</h4>\r\n              <div className=\"messages-container\">\r\n                {chatMessages.length === 0 ? (\r\n                  <div className=\"no-messages\">No messages yet</div>\r\n                ) : (\r\n                  chatMessages.map((message, index) => {\r\n                    const isUser1 = message.from === selectedConnection.users[0];\r\n                    const sender = isUser1 ? getUserNickname(selectedConnection.users[0]) : getUserNickname(selectedConnection.users[1]);\r\n                    \r\n                    return (\r\n                      <div \r\n                        key={index} \r\n                        className={`message ${isUser1 ? 'user-1' : 'user-2'}`}\r\n                      >\r\n                        <div className=\"message-sender\">\r\n                          {sender}\r\n                        </div>\r\n                        <div className=\"message-content\">{message.content}</div>\r\n                        <div className=\"message-timestamp\">\r\n                          {new Date(message.timestamp).toLocaleTimeString()}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPanel;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC;IACjCsB,WAAW,EAAE,CAAC;IACdC,iBAAiB,EAAE,CAAC;IACpBC,gBAAgB,EAAE,CAAC;IACnBC,UAAU,EAAE,CAAC;IACbC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAGzB,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B;EACA,MAAM0B,kBAAkB,GAAG1B,MAAM,CAAC,CAAC,CAAC,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACE,MAAM,CAAC0B,SAAS,EAAE;MACrBC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD5B,MAAM,CAAC6B,OAAO,CAAC,CAAC;IAClB;IAEAF,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA5B,MAAM,CAAC8B,EAAE,CAAC,YAAY,EAAEC,eAAe,CAAC;IACxC/B,MAAM,CAAC8B,EAAE,CAAC,oBAAoB,EAAEE,iBAAiB,CAAC;IAClDhC,MAAM,CAAC8B,EAAE,CAAC,yBAAyB,EAAEG,sBAAsB,CAAC;IAC5DjC,MAAM,CAAC8B,EAAE,CAAC,sBAAsB,EAAEI,mBAAmB,CAAC;IACtDlC,MAAM,CAAC8B,EAAE,CAAC,oBAAoB,EAAEK,iBAAiB,CAAC;IAClDnC,MAAM,CAAC8B,EAAE,CAAC,oBAAoB,EAAEM,iBAAiB,CAAC;IAClDpC,MAAM,CAAC8B,EAAE,CAAC,sBAAsB,EAAEO,mBAAmB,CAAC;IACtDrC,MAAM,CAAC8B,EAAE,CAAC,qBAAqB,EAAEQ,kBAAkB,CAAC;IACpDtC,MAAM,CAAC8B,EAAE,CAAC,qBAAqB,EAAES,kBAAkB,CAAC;IACpDvC,MAAM,CAAC8B,EAAE,CAAC,qBAAqB,EAAEU,kBAAkB,CAAC;;IAEpD;IACA,OAAO,MAAM;MACXb,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD5B,MAAM,CAACyC,GAAG,CAAC,YAAY,EAAEV,eAAe,CAAC;MACzC/B,MAAM,CAACyC,GAAG,CAAC,oBAAoB,EAAET,iBAAiB,CAAC;MACnDhC,MAAM,CAACyC,GAAG,CAAC,yBAAyB,EAAER,sBAAsB,CAAC;MAC7DjC,MAAM,CAACyC,GAAG,CAAC,sBAAsB,EAAEP,mBAAmB,CAAC;MACvDlC,MAAM,CAACyC,GAAG,CAAC,oBAAoB,EAAEN,iBAAiB,CAAC;MACnDnC,MAAM,CAACyC,GAAG,CAAC,oBAAoB,EAAEL,iBAAiB,CAAC;MACnDpC,MAAM,CAACyC,GAAG,CAAC,sBAAsB,EAAEJ,mBAAmB,CAAC;MACvDrC,MAAM,CAACyC,GAAG,CAAC,qBAAqB,EAAEH,kBAAkB,CAAC;MACrDtC,MAAM,CAACyC,GAAG,CAAC,qBAAqB,EAAEF,kBAAkB,CAAC;MACrDvC,MAAM,CAACyC,GAAG,CAAC,qBAAqB,EAAED,kBAAkB,CAAC;;MAErD;MACAE,MAAM,CAACC,MAAM,CAAClB,kBAAkB,CAACmB,OAAO,CAAC,CAACC,OAAO,CAACC,EAAE,IAAI;QACtD,IAAIA,EAAE,EAAEA,EAAE,CAACC,KAAK,CAAC,CAAC;MACpB,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMhB,eAAe,GAAIiB,IAAI,IAAK;IAChCrB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEoB,IAAI,CAAC;IACzCtC,QAAQ,CAACsC,IAAI,CAACvC,KAAK,IAAI,EAAE,CAAC;IAC1BG,cAAc,CAACoC,IAAI,CAACrC,WAAW,IAAI,EAAE,CAAC;IACtCL,aAAa,CAAC,IAAI,CAAC;;IAEnB;IACAY,QAAQ,CAAC;MACPC,WAAW,EAAE,CAAC6B,IAAI,CAACvC,KAAK,IAAI,EAAE,EAAEwC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,MAAM,CAAC,CAACC,MAAM;MAC7EhC,iBAAiB,EAAE,CAAC4B,IAAI,CAACrC,WAAW,IAAI,EAAE,EAAEsC,MAAM,CAACI,IAAI,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAACF,MAAM;MAChF/B,gBAAgB,EAAE,CAAC2B,IAAI,CAACrC,WAAW,IAAI,EAAE,EAAEyC,MAAM;MACjD9B,UAAU,EAAE,CAAC0B,IAAI,CAAC1B,UAAU,IAAI,EAAE,EAAE8B,MAAM;MAC1C7B,WAAW,EAAE,CAACyB,IAAI,CAACzB,WAAW,IAAI,EAAE,EAAE6B;IACxC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMpB,iBAAiB,GAAIuB,YAAY,IAAK;IAC1C5B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE2B,YAAY,CAAC;IACnD7C,QAAQ,CAAC6C,YAAY,IAAI,EAAE,CAAC;;IAE5B;IACArC,QAAQ,CAACsC,SAAS,KAAK;MACrB,GAAGA,SAAS;MACZrC,WAAW,EAAE,CAACoC,YAAY,IAAI,EAAE,EAAEN,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,MAAM,CAAC,CAACC;IAC3E,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMnB,sBAAsB,GAAIe,IAAI,IAAK;IACvCrB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEoB,IAAI,CAAC;IAChD,MAAMS,kBAAkB,GAAGT,IAAI,CAACrC,WAAW,IAAI,EAAE;IACjDC,cAAc,CAAC6C,kBAAkB,CAAC;;IAElC;IACA,IAAI5C,kBAAkB,IAClB4C,kBAAkB,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK/C,kBAAkB,CAAC+C,EAAE,IAAID,CAAC,CAACL,OAAO,CAAC,EAAE;MAC7ExC,qBAAqB,CAAC,IAAI,CAAC;MAC3BE,eAAe,CAAC,EAAE,CAAC;;MAEnB;MACA,IAAIH,kBAAkB,CAACJ,KAAK,EAAE;QAC5BI,kBAAkB,CAACJ,KAAK,CAACoC,OAAO,CAACgB,MAAM,IAAI;UACzC,IAAIpC,kBAAkB,CAACmB,OAAO,CAACiB,MAAM,CAAC,EAAE;YACtCpC,kBAAkB,CAACmB,OAAO,CAACiB,MAAM,CAAC,CAACd,KAAK,CAAC,CAAC;YAC1C,OAAOtB,kBAAkB,CAACmB,OAAO,CAACiB,MAAM,CAAC;UAC3C;QACF,CAAC,CAAC;MACJ;IACF;IAEA,IAAIb,IAAI,CAACvC,KAAK,EAAE;MACdC,QAAQ,CAACsC,IAAI,CAACvC,KAAK,CAAC;IACtB;;IAEA;IACAS,QAAQ,CAACsC,SAAS,KAAK;MACrB,GAAGA,SAAS;MACZpC,iBAAiB,EAAEqC,kBAAkB,CAACR,MAAM,CAACI,IAAI,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAACF,MAAM;MAC1E/B,gBAAgB,EAAEoC,kBAAkB,CAACL;IACvC,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMlB,mBAAmB,GAAIc,IAAI,IAAK;IACpCrB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEoB,IAAI,CAAC;IAC7C,IAAInC,kBAAkB,IAAIA,kBAAkB,CAAC+C,EAAE,KAAKZ,IAAI,CAACc,YAAY,EAAE;MACrE9C,eAAe,CAACgC,IAAI,CAACe,QAAQ,IAAI,EAAE,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAM5B,iBAAiB,GAAIa,IAAI,IAAK;IAClCrB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEoB,IAAI,CAAC;IAC3ChC,eAAe,CAACgC,IAAI,CAACe,QAAQ,IAAI,EAAE,CAAC;EACtC,CAAC;;EAED;EACA,MAAM3B,iBAAiB,GAAGA,CAAA,KAAM;IAC9BT,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BoC,KAAK,CAAC,yCAAyC,CAAC;EAClD,CAAC;;EAED;EACA,MAAM1B,kBAAkB,GAAIU,IAAI,IAAK;IACnCrB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEoB,IAAI,CAAC;IAC5C,IAAInC,kBAAkB,IAAIA,kBAAkB,CAAC+C,EAAE,KAAKZ,IAAI,CAACc,YAAY,EAAE;MACrE;MACAG,cAAc,CAACpD,kBAAkB,CAAC;IACpC;EACF,CAAC;;EAED;EACA,MAAMwB,mBAAmB,GAAG,MAAOW,IAAI,IAAK;IAC1CrB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEoB,IAAI,CAAC;IAE7C,IAAI;MACF;MACA,IAAI,CAACvB,kBAAkB,CAACmB,OAAO,CAACI,IAAI,CAACa,MAAM,CAAC,EAAE;QAC5C,MAAMK,UAAU,GAAG;UACjBA,UAAU,EAAE,CACV;YAAEC,IAAI,EAAE;UAA+B,CAAC,EACxC;YAAEA,IAAI,EAAE;UAAgC,CAAC,EACzC;YAAEA,IAAI,EAAE;UAAgC,CAAC;QAE7C,CAAC;QAED,MAAMrB,EAAE,GAAG,IAAIsB,iBAAiB,CAACF,UAAU,CAAC;QAC5CzC,kBAAkB,CAACmB,OAAO,CAACI,IAAI,CAACa,MAAM,CAAC,GAAGf,EAAE;;QAE5C;QACAA,EAAE,CAACuB,cAAc,GAAIC,KAAK,IAAK;UAC7B,IAAIA,KAAK,CAACC,SAAS,EAAE;YACnB5C,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE0C,KAAK,CAACC,SAAS,CAAC;YAC9DvE,MAAM,CAACwE,IAAI,CAAC,qBAAqB,EAAE;cACjCC,MAAM,EAAEzB,IAAI,CAACa,MAAM;cACnBU,SAAS,EAAED,KAAK,CAACC;YACnB,CAAC,CAAC;UACJ;QACF,CAAC;;QAED;QACAzB,EAAE,CAAC4B,OAAO,GAAIJ,KAAK,IAAK;UACtB3C,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEoB,IAAI,CAACa,MAAM,EAAES,KAAK,CAAC;UAClE,IAAI9C,SAAS,CAACoB,OAAO,CAACI,IAAI,CAACa,MAAM,CAAC,EAAE;YAClC,MAAMc,YAAY,GAAGnD,SAAS,CAACoB,OAAO,CAACI,IAAI,CAACa,MAAM,CAAC;YACnDc,YAAY,CAACC,SAAS,GAAGN,KAAK,CAACO,OAAO,CAAC,CAAC,CAAC;;YAEzC;YACAF,YAAY,CAACG,gBAAgB,GAAG,MAAM;cACpCnD,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;cACzD+C,YAAY,CAACI,IAAI,CAAC,CAAC,CAChBC,KAAK,CAACC,CAAC,IAAItD,OAAO,CAACuD,KAAK,CAAC,4BAA4B,EAAED,CAAC,CAAC,CAAC;YAC/D,CAAC;UACH;QACF,CAAC;MACH;MAEA,MAAMnC,EAAE,GAAGrB,kBAAkB,CAACmB,OAAO,CAACI,IAAI,CAACa,MAAM,CAAC;;MAElD;MACA,MAAMf,EAAE,CAACqC,oBAAoB,CAAC,IAAIC,qBAAqB,CAACpC,IAAI,CAACqC,KAAK,CAAC,CAAC;;MAEpE;MACA,MAAMC,MAAM,GAAG,MAAMxC,EAAE,CAACyC,YAAY,CAAC,CAAC;MACtC,MAAMzC,EAAE,CAAC0C,mBAAmB,CAACF,MAAM,CAAC;;MAEpC;MACAtF,MAAM,CAACwE,IAAI,CAAC,qBAAqB,EAAE;QACjCX,MAAM,EAAEb,IAAI,CAACa,MAAM;QACnByB,MAAM,EAAEA;MACV,CAAC,CAAC;MAEF3D,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEoB,IAAI,CAACa,MAAM,CAAC;IACzD,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdvD,OAAO,CAACuD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;;EAED;EACA,MAAM3C,kBAAkB,GAAG,MAAOS,IAAI,IAAK;IACzC,IAAI;MACFrB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEoB,IAAI,CAACyC,IAAI,CAAC;MAEtD,MAAM3C,EAAE,GAAGrB,kBAAkB,CAACmB,OAAO,CAACI,IAAI,CAACyC,IAAI,CAAC;MAChD,IAAI3C,EAAE,EAAE;QACN,MAAMA,EAAE,CAAC4C,eAAe,CAAC,IAAIC,eAAe,CAAC3C,IAAI,CAACuB,SAAS,CAAC,CAAC;QAC7D5C,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEoB,IAAI,CAACyC,IAAI,CAAC;MACzD,CAAC,MAAM;QACL9D,OAAO,CAACuD,KAAK,CAAC,oCAAoC,EAAElC,IAAI,CAACyC,IAAI,CAAC;MAChE;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdvD,OAAO,CAACuD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAM1C,kBAAkB,GAAIQ,IAAI,IAAK;IACnCrB,OAAO,CAACuD,KAAK,CAAC,gBAAgB,EAAElC,IAAI,CAACkC,KAAK,CAAC;IAC3ClB,KAAK,CAAC,gCAAgChB,IAAI,CAACkC,KAAK,EAAE,CAAC;EACrD,CAAC;;EAED;EACA,MAAMU,WAAW,GAAIX,CAAC,IAAK;IACzBA,CAAC,CAACY,cAAc,CAAC,CAAC;IAClBlE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAErB,QAAQ,CAAC;IACrDP,MAAM,CAACwE,IAAI,CAAC,aAAa,EAAEjE,QAAQ,CAAC;EACtC,CAAC;;EAED;EACA,MAAMuF,sBAAsB,GAAGA,CAAA,KAAM;IACnCnE,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAErB,QAAQ,CAAC;IACxDP,MAAM,CAACwE,IAAI,CAAC,aAAa,EAAEjE,QAAQ,CAAC;EACtC,CAAC;;EAED;EACA,MAAMwF,gBAAgB,GAAIC,UAAU,IAAK;IACvC;IACA,IAAInF,kBAAkB,IAAIA,kBAAkB,CAAC+C,EAAE,KAAKoC,UAAU,CAACpC,EAAE,EAAE;MACjE/C,kBAAkB,CAACJ,KAAK,CAACoC,OAAO,CAACgB,MAAM,IAAI;QACzC,IAAIpC,kBAAkB,CAACmB,OAAO,CAACiB,MAAM,CAAC,EAAE;UACtCpC,kBAAkB,CAACmB,OAAO,CAACiB,MAAM,CAAC,CAACd,KAAK,CAAC,CAAC;UAC1C,OAAOtB,kBAAkB,CAACmB,OAAO,CAACiB,MAAM,CAAC;QAC3C;MACF,CAAC,CAAC;IACJ;IAEA/C,qBAAqB,CAACkF,UAAU,CAAC;IACjChF,eAAe,CAAC,EAAE,CAAC;IACnBhB,MAAM,CAACwE,IAAI,CAAC,gBAAgB,EAAEwB,UAAU,CAACpC,EAAE,CAAC;;IAE5C;IACAK,cAAc,CAAC+B,UAAU,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM/B,cAAc,GAAI+B,UAAU,IAAK;IACrCrE,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEoE,UAAU,CAACpC,EAAE,CAAC;IAChE5D,MAAM,CAACwE,IAAI,CAAC,uBAAuB,EAAEwB,UAAU,CAACpC,EAAE,CAAC;EACrD,CAAC;;EAED;EACA,MAAMqC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,OAAO,EAAE;UACP,WAAW,EAAE7F;QACf;MACF,CAAC,CAAC;MAEF,IAAI2F,QAAQ,CAACG,EAAE,EAAE;QACf,MAAMrD,IAAI,GAAG,MAAMkD,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCpF,QAAQ,CAAC8B,IAAI,CAAC;MAChB;IACF,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACdvD,OAAO,CAACuD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAMqB,WAAW,GAAGA,CAAA,KAAM;IACxBvG,MAAM,CAACwE,IAAI,CAAC,aAAa,EAAEjE,QAAQ,CAAC;IACpC0F,UAAU,CAAC,CAAC;;IAEZ;IACA,IAAIpF,kBAAkB,EAAE;MACtBoD,cAAc,CAACpD,kBAAkB,CAAC;IACpC;EACF,CAAC;;EAED;EACA,MAAM2F,eAAe,GAAI3C,MAAM,IAAK;IAClC,MAAMX,IAAI,GAAGzC,KAAK,CAACiD,IAAI,CAAC+C,CAAC,IAAIA,CAAC,CAAC7C,EAAE,KAAKC,MAAM,CAAC;IAC7C,OAAOX,IAAI,GAAGA,IAAI,CAACwD,QAAQ,IAAI,WAAW,GAAG,SAAS;EACxD,CAAC;;EAED;EACA,MAAMC,cAAc,GAAGA,CAACC,SAAS,EAAEtD,OAAO,KAAK;IAC7C,MAAMuD,KAAK,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;IACjC,MAAMG,GAAG,GAAGzD,OAAO,GAAG,IAAIwD,IAAI,CAACxD,OAAO,CAAC,GAAG,IAAIwD,IAAI,CAAC,CAAC;IACpD,MAAME,MAAM,GAAGD,GAAG,GAAGF,KAAK;IAC1B,MAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,KAAK,CAAC;IAC3C,MAAMI,QAAQ,GAAGF,IAAI,CAACC,KAAK,CAAEH,MAAM,GAAG,KAAK,GAAI,IAAI,CAAC;IACpD,OAAO,GAAGC,QAAQ,KAAKG,QAAQ,GAAG;EACpC,CAAC;;EAED;EACA,IAAI,CAAC/G,UAAU,EAAE;IACf,oBACEH,OAAA;MAAKmH,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BpH,OAAA;QAAAoH,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBxH,OAAA;QAAMyH,QAAQ,EAAE/B,WAAY;QAAA0B,QAAA,gBAC1BpH,OAAA;UACE0H,IAAI,EAAC,UAAU;UACfC,KAAK,EAAEtH,QAAS;UAChBuH,QAAQ,EAAG7C,CAAC,IAAKzE,WAAW,CAACyE,CAAC,CAACR,MAAM,CAACoD,KAAK,CAAE;UAC7CE,WAAW,EAAC,gBAAgB;UAC5BC,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,eACFxH,OAAA;UACE0H,IAAI,EAAC,QAAQ;UACbK,OAAO,EAAEnC,sBAAuB;UAAAwB,QAAA,EACjC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACPxH,OAAA;QAAKmH,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBpH,OAAA;UAAAoH,QAAA,EAAG;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACjCxH,OAAA;UAAAoH,QAAA,GAAG,oBAAkB,EAACtH,MAAM,CAAC0B,SAAS,GAAG,KAAK,GAAG,IAAI;QAAA;UAAA6F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;;EAEA;EACA,MAAMQ,qBAAqB,GAAGvH,WAAW,CAACsC,MAAM,CAACI,IAAI,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC;;EAEvE;EACA,oBACEpD,OAAA;IAAKmH,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BpH,OAAA;MAAKmH,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BpH,OAAA;QAAAoH,QAAA,EAAI;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjCxH,OAAA;QAAKmH,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC7BpH,OAAA;UAAQ+H,OAAO,EAAE1B,WAAY;UAAAe,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENxH,OAAA;MAAKmH,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BpH,OAAA;QAAKmH,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBpH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAErG,KAAK,CAACE;QAAW;UAAAoG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACrDxH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,eACNxH,OAAA;QAAKmH,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBpH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAErG,KAAK,CAACG;QAAiB;UAAAmG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3DxH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,eACNxH,OAAA;QAAKmH,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBpH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAErG,KAAK,CAACK;QAAU;UAAAiG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACpDxH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACNxH,OAAA;QAAKmH,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBpH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAErG,KAAK,CAACM;QAAW;UAAAgG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACrDxH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACNxH,OAAA;QAAKmH,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBpH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAErG,KAAK,CAACI;QAAgB;UAAAkG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC1DxH,OAAA;UAAKmH,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENxH,OAAA;MAAKmH,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BpH,OAAA;QAAKmH,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BpH,OAAA;UAAAoH,QAAA,GAAI,gBAAc,EAAC7G,KAAK,CAACwC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,MAAM,CAAC,CAACC,MAAM,EAAC,GAAC;QAAA;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7ExH,OAAA;UAAKmH,SAAS,EAAC,WAAW;UAAAC,QAAA,EACvB7G,KAAK,CACHwC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,MAAM,CAAC,CACtCgF,GAAG,CAACjF,IAAI,iBACPhD,OAAA;YAAmBmH,SAAS,EAAE,cAAcnE,IAAI,CAACC,MAAM,EAAG;YAAAmE,QAAA,gBACxDpH,OAAA;cAAKmH,SAAS,EAAC,SAAS;cAAAC,QAAA,EAAEpE,IAAI,CAACU,EAAE,CAACwE,SAAS,CAAC,CAAC,EAAE,CAAC;YAAC;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACxDxH,OAAA;cAAKmH,SAAS,EAAC,eAAe;cAAAC,QAAA,EAAEpE,IAAI,CAACwD,QAAQ,IAAI;YAAW;cAAAa,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACnExH,OAAA;cAAKmH,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BpH,OAAA;gBAAMmH,SAAS,EAAE,oBAAoBnE,IAAI,CAACC,MAAM;cAAG;gBAAAoE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,EAC1DxE,IAAI,CAACC,MAAM;YAAA;cAAAoE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC,eACNxH,OAAA;cAAKmH,SAAS,EAAC,WAAW;cAAAC,QAAA,EACvB,IAAIR,IAAI,CAAC5D,IAAI,CAACmF,cAAc,CAAC,CAACC,kBAAkB,CAAC;YAAC;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC;UAAA,GATExE,IAAI,CAACU,EAAE;YAAA2D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAUZ,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENxH,OAAA;QAAKmH,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCpH,OAAA;UAAAoH,QAAA,GAAI,sBAAoB,EAACY,qBAAqB,CAAC9E,MAAM,EAAC,GAAC;QAAA;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5DxH,OAAA;UAAKmH,SAAS,EAAC,iBAAiB;UAAAC,QAAA,GAC7BY,qBAAqB,CAACC,GAAG,CAACnC,UAAU,iBACnC9F,OAAA;YAEEmH,SAAS,EAAE,oBAAoBxG,kBAAkB,IAAIA,kBAAkB,CAAC+C,EAAE,KAAKoC,UAAU,CAACpC,EAAE,GAAG,UAAU,GAAG,EAAE,EAAG;YACjHqE,OAAO,EAAEA,CAAA,KAAMlC,gBAAgB,CAACC,UAAU,CAAE;YAAAsB,QAAA,gBAE5CpH,OAAA;cAAKmH,SAAS,EAAC,oBAAoB;cAAAC,QAAA,gBACjCpH,OAAA;gBAAKmH,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,EAC9BtB,UAAU,CAACvF,KAAK,CAAC0H,GAAG,CAACtE,MAAM,iBAC1B3D,OAAA;kBAAmBmH,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAC3Cd,eAAe,CAAC3C,MAAM;gBAAC,GADfA,MAAM;kBAAA0D,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEX,CACP,CAAC,CAACa,MAAM,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAK,CAACD,IAAI,EAAE,KAAK,EAAEC,IAAI,CAAC;cAAC;gBAAAlB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3C,CAAC,eACNxH,OAAA;gBAAKmH,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAAEtB,UAAU,CAAC4B;cAAI;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACxDxH,OAAA;gBAAKmH,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,GAAC,WACtB,EAAC,IAAIR,IAAI,CAACd,UAAU,CAACY,SAAS,CAAC,CAAC0B,kBAAkB,CAAC,CAAC,eAC7DpI,OAAA;kBAAAqH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,cACI,EAACf,cAAc,CAACX,UAAU,CAACY,SAAS,CAAC;cAAA;gBAAAW,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5C,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNxH,OAAA;cACEmH,SAAS,EAAC,gBAAgB;cAC1BY,OAAO,EAAGhD,CAAC,IAAK;gBACdA,CAAC,CAACyD,eAAe,CAAC,CAAC;gBACnBzE,cAAc,CAAC+B,UAAU,CAAC;cAC5B,CAAE;cAAAsB,QAAA,EACH;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA,GA3BJ1B,UAAU,CAACpC,EAAE;YAAA2D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA4Bf,CACN,CAAC,EACDQ,qBAAqB,CAAC9E,MAAM,KAAK,CAAC,iBACjClD,OAAA;YAAKmH,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAqB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAC3D;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAEL7G,kBAAkB,iBACjBX,OAAA;QAAKmH,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BpH,OAAA;UAAAoH,QAAA,EAAI;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BxH,OAAA;UAAKmH,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7BpH,OAAA;YAAKmH,SAAS,EAAC,eAAe;YAAAC,QAAA,GAAC,MAAI,EAACzG,kBAAkB,CAAC+C,EAAE,CAACwE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACjFxH,OAAA;YAAKmH,SAAS,EAAC,iBAAiB;YAAAC,QAAA,GAAC,QAAM,EAACzG,kBAAkB,CAAC+G,IAAI;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACtExH,OAAA;YACEmH,SAAS,EAAC,wBAAwB;YAClCY,OAAO,EAAEA,CAAA,KAAMhE,cAAc,CAACpD,kBAAkB,CAAE;YAAAyG,QAAA,EACnD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENxH,OAAA;UAAKmH,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC3BzG,kBAAkB,CAACJ,KAAK,CAAC0H,GAAG,CAACtE,MAAM;YAAA,IAAA8E,qBAAA;YAAA,oBAClCzI,OAAA;cAAkBmH,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC5CpH,OAAA;gBAAAoH,QAAA,EAAKd,eAAe,CAAC3C,MAAM;cAAC;gBAAA0D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAClCxH,OAAA;gBACE0I,GAAG,EAAEC,EAAE,IAAI;kBAAE,IAAIA,EAAE,EAAErH,SAAS,CAACoB,OAAO,CAACiB,MAAM,CAAC,GAAGgF,EAAE;gBAAE,CAAE;gBACvDxB,SAAS,EAAC,aAAa;gBACvByB,QAAQ;gBACRC,WAAW;cAAA;gBAAAxB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACZ,CAAC,eACFxH,OAAA;gBAAKmH,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAC1B,GAAAqB,qBAAA,GAACnH,SAAS,CAACoB,OAAO,CAACiB,MAAM,CAAC,cAAA8E,qBAAA,eAAzBA,qBAAA,CAA2B/D,SAAS,kBACpC1E,OAAA;kBAAMmH,SAAS,EAAC,eAAe;kBAAAC,QAAA,EAAC;gBAAuB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAE7D,CAAC;YAAA,GAZE7D,MAAM;cAAA0D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAaX,CAAC;UAAA,CACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENxH,OAAA;UAAKmH,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BpH,OAAA;YAAAoH,QAAA,EAAI;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtBxH,OAAA;YAAKmH,SAAS,EAAC,oBAAoB;YAAAC,QAAA,EAChCvG,YAAY,CAACqC,MAAM,KAAK,CAAC,gBACxBlD,OAAA;cAAKmH,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAC;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,GAElD3G,YAAY,CAACoH,GAAG,CAAC,CAACa,OAAO,EAAEC,KAAK,KAAK;cACnC,MAAMC,OAAO,GAAGF,OAAO,CAACvD,IAAI,KAAK5E,kBAAkB,CAACJ,KAAK,CAAC,CAAC,CAAC;cAC5D,MAAM0I,MAAM,GAAGD,OAAO,GAAG1C,eAAe,CAAC3F,kBAAkB,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG+F,eAAe,CAAC3F,kBAAkB,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;cAEpH,oBACEP,OAAA;gBAEEmH,SAAS,EAAE,WAAW6B,OAAO,GAAG,QAAQ,GAAG,QAAQ,EAAG;gBAAA5B,QAAA,gBAEtDpH,OAAA;kBAAKmH,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,EAC5B6B;gBAAM;kBAAA5B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC,eACNxH,OAAA;kBAAKmH,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,EAAE0B,OAAO,CAACI;gBAAO;kBAAA7B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eACxDxH,OAAA;kBAAKmH,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,EAC/B,IAAIR,IAAI,CAACkC,OAAO,CAACK,SAAS,CAAC,CAACf,kBAAkB,CAAC;gBAAC;kBAAAf,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC9C,CAAC;cAAA,GATDuB,KAAK;gBAAA1B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAUP,CAAC;YAEV,CAAC;UACF;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtH,EAAA,CA1gBID,UAAU;AAAAmJ,EAAA,GAAVnJ,UAAU;AA4gBhB,eAAeA,UAAU;AAAC,IAAAmJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}